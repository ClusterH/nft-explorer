{"version":3,"sources":["redux/contractsSlice.ts","hooks/useTotalSupply.ts","hooks/useTokenURI.ts","hooks/useTokenByIndex.ts","hooks/usePrevious.ts","hooks/useForceUpdate.ts","constants.ts","GalleryModal.tsx","helpers/sleep.ts","DelayedImage.tsx","helpers/ipfsGatewayUrl.ts","Gallery.tsx","redux/optionsSlice.ts","presets.ts","ipsGateways.ts","Header.tsx","Navigator.tsx","App.tsx","theme.ts","redux/store.ts","index.tsx"],"names":["contractsSlice","createSlice","name","initialState","dataByContract","activeContractAddress","reducers","init","state","action","payload","contractAddress","contractMap","i","initialValue","totalSupply","setMetadataURI","tokens","forEach","tokenId","uri","setMetadataJSON","json","image","changeActiveContractAddress","actions","contractInterface","ethers","utils","Interface","ERC721","abi","useTotalSupply","useContractCall","address","method","args","useTokenURI","indexes","useContractCalls","map","index","useTokenByIndex","usePrevious","value","ref","useRef","useEffect","current","useForceUpdate","useState","setValue","process","REACT_APP_ALCHEMY_API","REACT_APP_CHAIN_ID","REACT_APP_ETHERSCAN_URL","alchemyApi","configChainId","parseInt","GalleryModal","imgUrl","onClose","resize","window","addEventListener","removeEventListener","width","innerWidth","height","innerHeight","setWindowSize","isOpen","closeOnOverlayClick","motionPreset","size","margin","bg","onClick","e","target","classList","contains","justify","align","className","maxWidth","objectFit","src","sleep","ms","signal","Promise","resolve","reject","timeout","setTimeout","clearTimeout","DelayedImage","boxSize","alt","title","loading","setFinishedDelay","isFinishedDelay","isLoadedImage","metadata","a","delayed","ipfsGatewayUrl","ipfsGateway","hash","slice","splitHash","split","transformedHash","cids","toV1","toString","Gallery","chainId","useEthers","forceUpdate","useSelector","contracts","corsProxyUrl","options","dispatch","useDispatch","tokensByIndex","toNumber","pendingUriTokensRef","tokenURIs","list","Object","keys","key","filter","_","stringCache","JSON","stringify","tokensToDispatch","tokensToDispatchIds","t","length","containerWidth","wrongNetWork","finishedRef","tokenModal","setTokenModal","fetchedRef","fetchTokenJSON","useCallback","startsWith","fetch","headers","Origin","response","text","data","parse","timeoutsRef","newTimeoutsRef","counterRef","console","log","fetchViewportJSON","debounce","sleepCounter","values","controller","abort","cellRendererListRef","includes","Math","floor","cellRendererList","toggle","addFinishedDelay","loadedUris","every","prevLoadedUris","prevActiveContractAddress","loadedRef","delayCachedImage","sleepTime","img","Image","onload","complete","naturalWidth","missingUri","cellRenderer","style","times","start","cells","Array","fill","push","AbortController","promise","direction","position","_hover","background","opacity","top","fontSize","ml","undefined","wrap","id","outerRef","onScroll","itemCount","ceil","itemSize","color","mt","textAlign","optionsSlice","setCorsProxyUrl","setIpfsGateway","presets","cors","ipsGateways","Header","formContractAddress","setFormContractAddress","formIpfsGatewayUrl","serFormIpfsGatewayUrl","firstFormIpfsGatewayUrl","setFirstFormIpfsGatewayUrl","find","preset","setPreset","showOptions","setShowOptions","formCorsProxyUrl","setFormCorsProxyUrl","firstFormCorsProxyUrl","setFirstFormCorsProxyUrl","as","display","flexDirection","p","alignItems","borderRadius","m","onChange","minWidth","placeholder","borderWidth","ipfsGateways","isDisabled","optionsInitialState","Navigator","x","y","indicatorPosition","setIndicatorPosition","scrollPercentage","setScrollPercentage","fn","yPos","scrollY","document","body","offsetHeight","chunks","increase","items","numItems","isReady","offset","itemView","right","num","growthPercentage","mr","App","pt","theme","extendTheme","config","initialColorMode","useSystemColorMode","store","configureStore","reducer","contractsReducer","optionsReducer","middleware","save","states","namespace","preloadedState","load","readOnlyChainId","readOnlyUrls","ReactDOM","render","StrictMode","DAppProvider","getElementById"],"mappings":"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","file":"static/js/main.c0d2c5a1.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\ninterface ContractState {\n  activeContractAddress: string;\n  dataByContract: any;\n}\n\nconst initialState: ContractState = {\n  dataByContract: {},\n  activeContractAddress: \"0xBd3531dA5CF5857e7CfAA92426877b022e612cf8\"\n};\n\nexport const contractsSlice = createSlice({\n  name: \"contracts\",\n  initialState,\n  reducers: {\n    init: (state, action) => {\n      if (!state.dataByContract[action.payload.contractAddress]) {\n        let contractMap: { [index: number]: any } = {};\n        for (\n          let i = action.payload.initialValue;\n          i < action.payload.totalSupply + action.payload.initialValue;\n          i++\n        ) {\n          contractMap[i] = {};\n        }\n        state.dataByContract[action.payload.contractAddress] = contractMap;\n      }\n    },\n    setMetadataURI: (state, action) => {\n      action.payload.tokens.forEach(({ tokenId, uri }: any) => {\n        state.dataByContract[action.payload.contractAddress][tokenId].uri = uri;\n      });\n    },\n    setMetadataJSON: (state, action) => {\n      action.payload.tokens.forEach(({ tokenId, json }: any) => {\n        state.dataByContract[action.payload.contractAddress][tokenId].json = {\n          image: json.image,\n          name: json.name\n        };\n      });\n    },\n    changeActiveContractAddress: (state, action) => {\n      state.activeContractAddress = action.payload;\n    }\n  }\n});\n\nexport const {\n  setMetadataURI,\n  setMetadataJSON,\n  changeActiveContractAddress,\n  init\n} = contractsSlice.actions;\n\nexport default contractsSlice.reducer;\n","import { ethers } from \"ethers\";\nimport { useContractCall } from \"@usedapp/core\";\nimport ERC721 from \"../abi/ERC721.json\";\n// import { contractAddress } from \"../constants.js\";\n\nconst contractInterface = new ethers.utils.Interface(ERC721.abi);\n\nconst useTotalSupply = (contractAddress: string) => {\n  const [totalSupply]: any =\n    useContractCall({\n      abi: contractInterface,\n      address: contractAddress,\n      method: \"totalSupply\",\n      args: []\n    }) ?? [];\n  return totalSupply;\n};\nexport default useTotalSupply;\n","import { ethers } from \"ethers\";\nimport { useContractCalls } from \"@usedapp/core\";\nimport ERC721 from \"../abi/ERC721.json\";\n// import { contractAddress } from \"../constants.js\";\n\nconst contractInterface = new ethers.utils.Interface(ERC721.abi);\n\nconst useTokenURI = (contractAddress: string, indexes: number[]) => {\n  const tokenURI: any =\n    useContractCalls(\n      indexes.map(index => ({\n        abi: contractInterface,\n        address: contractAddress,\n        method: \"tokenURI\",\n        args: [index]\n      }))\n    ) ?? null;\n  return tokenURI;\n};\nexport default useTokenURI;\n","import { ethers } from \"ethers\";\nimport { useContractCalls } from \"@usedapp/core\";\nimport ERC721 from \"../abi/ERC721.json\";\n\nconst contractInterface = new ethers.utils.Interface(ERC721.abi);\n\nconst useTokenByIndex = (contractAddress: string, indexes: number[]) => {\n  const tokenByIndex: any =\n    useContractCalls(\n      indexes.map(index => ({\n        abi: contractInterface,\n        address: contractAddress,\n        method: \"tokenByIndex\",\n        args: [index]\n      }))\n    ) ?? null;\n  return tokenByIndex;\n};\nexport default useTokenByIndex;\n","import { useEffect, useRef } from \"react\";\nconst usePrevious = (value: any) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePrevious;\n","import { useState } from \"react\";\nconst useForceUpdate = () => {\n  const [, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n};\nexport default useForceUpdate;\n","const {\n  REACT_APP_ALCHEMY_API,\n  REACT_APP_CHAIN_ID,\n  REACT_APP_ETHERSCAN_URL\n} = process.env;\n\nexport const alchemyApi: string = `${REACT_APP_ALCHEMY_API}`;\nexport const configChainId: number = REACT_APP_CHAIN_ID\n  ? parseInt(REACT_APP_CHAIN_ID)\n  : 0;\nexport const etherScanUrl: string = `${REACT_APP_ETHERSCAN_URL}`;\n","import { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  Image,\n  Flex\n} from \"@chakra-ui/react\";\n\nconst GalleryModal = ({\n  tokenId,\n  imgUrl,\n  onClose\n}: GalleryModalProps) => {\n  useEffect(() => {\n    resize();\n    window.addEventListener(\"resize\", () => {\n      resize();\n    });\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  const [, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n\n  const resize = () => {\n    setWindowSize({\n      height: window.innerHeight,\n      width: window.innerWidth\n    });\n  };\n\n  return (\n    <Modal\n      isOpen={tokenId !== null}\n      onClose={onClose}\n      closeOnOverlayClick\n      motionPreset=\"none\"\n      size={\"full\"}\n    >\n      <ModalOverlay />\n      <ModalContent\n        margin=\"0\"\n        bg=\"rgba(0,0,0,0.5)\"\n        onClick={e => {\n          const element = e.target as HTMLElement;\n          if (element.classList.contains(\"image-container\")) {\n            onClose();\n          }\n        }}\n      >\n        <ModalBody>\n          <Flex\n            height=\"\"\n            justify=\"center\"\n            align=\"center\"\n            className=\"image-container\"\n          >\n            <Image\n              maxWidth=\"none\"\n              height=\"calc(100vh - 50px)\"\n              objectFit=\"cover\"\n              src={imgUrl}\n            />\n          </Flex>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport interface GalleryModalProps {\n  tokenId: number;\n  imgUrl: string;\n  onClose: () => any;\n}\nexport default GalleryModal;\n","const sleep = (ms: number, signal?: any) =>\n  new Promise((resolve, reject) => {\n    let timeout: any;\n\n    const abortHandler = () => {\n      clearTimeout(timeout);\n      //reject();\n    };\n\n    timeout = setTimeout(resolve, ms);\n\n    signal?.addEventListener(\"abort\", abortHandler);\n    return timeout;\n  });\nexport default sleep;\n","import { useEffect } from \"react\";\nimport { Image, Flex } from \"@chakra-ui/react\";\nimport sleep from \"./helpers/sleep\";\n\ninterface DelayedImageProps {\n  boxSize: string;\n  alt: string;\n  title: string;\n  src: string;\n  index: number;\n  loading: \"eager\" | \"lazy\" | undefined;\n  tokenId: number;\n  setFinishedDelay: (newImage: number) => void;\n  isFinishedDelay: boolean;\n  isLoadedImage: boolean;\n  metadata: any;\n}\n\nconst DelayedImage = ({\n  boxSize,\n  alt,\n  title,\n  loading,\n  tokenId,\n  src,\n  index,\n  setFinishedDelay,\n  isFinishedDelay,\n  isLoadedImage,\n  metadata\n}: DelayedImageProps) => {\n  useEffect(() => {\n    const delayed = async () => {\n      await sleep(1500);\n      if (!isFinishedDelay) {\n        setFinishedDelay(tokenId);\n      }\n    };\n    delayed();\n  }, [isFinishedDelay, setFinishedDelay, tokenId, index]);\n\n  return isFinishedDelay && isLoadedImage && metadata && metadata.image ? (\n    <Image\n      boxSize={boxSize}\n      alt={alt}\n      title={title}\n      loading={loading}\n      src={src}\n    />\n  ) : (\n    <Flex height=\"200px\" width=\"200px\">\n    </Flex>\n  );\n};\nexport default DelayedImage;\n","import cids from \"cids\";\nconst ipfsGatewayUrl = (uri: string, ipfsGateway: string): string => {\n  const hash = uri.slice(7);\n  switch (ipfsGateway) {\n    case \"cloudflare-ipfs.com\":\n      return `https://${ipfsGateway}/ipfs/${hash}`;\n    case \"dweb.link\":\n    case \"infura-ipfs.io\":\n      const splitHash = hash.split(\"/\");\n      const transformedHash = new cids(splitHash[0]).toV1().toString(\"base32\");\n      return `https://${transformedHash}.ipfs.${ipfsGateway}${\n        splitHash[1] ? `/${splitHash[1]}` : \"\"\n      }`;\n  }\n  return uri;\n};\nexport default ipfsGatewayUrl;\n","import { Fragment, useEffect, useState, useRef, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { ReactWindowScroller } from \"react-window-scroller\";\nimport { init, setMetadataURI, setMetadataJSON } from \"./redux/contractsSlice\";\nimport { RootState } from \"./redux/store\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport { useEthers } from \"@usedapp/core\";\nimport { Flex, Box, Text, Spinner, Link } from \"@chakra-ui/react\";\n\nimport useTotalSupply from \"./hooks/useTotalSupply\";\nimport useTokenURI from \"./hooks/useTokenURI\";\nimport useTokenByIndex from \"./hooks/useTokenByIndex\";\nimport usePrevious from \"./hooks/usePrevious\";\nimport useForceUpdate from \"./hooks/useForceUpdate\";\nimport debounce from \"debounce\";\n\nimport { configChainId } from \"./constants\";\n\nimport GalleryModal from \"./GalleryModal\";\nimport DelayedImage from \"./DelayedImage\";\nimport ipfsGatewayUrl from \"./helpers/ipfsGatewayUrl\";\nimport sleep from \"./helpers/sleep\";\n\nconst Gallery: React.FC<RouteComponentProps> = () => {\n  // useDapp hooks\n  const { chainId } = useEthers();\n  const forceUpdate = useForceUpdate();\n\n  // redux\n  const dataByContract = useSelector(\n    ({ contracts: { dataByContract } }: RootState) => dataByContract\n  );\n\n  const activeContractAddress = useSelector(\n    ({ contracts: { activeContractAddress } }: RootState) =>\n      activeContractAddress\n  );\n\n  const corsProxyUrl = useSelector(\n    ({ options: { corsProxyUrl } }: RootState) => corsProxyUrl\n  );\n  const ipfsGateway = useSelector(\n    ({ options: { ipfsGateway } }: RootState) => ipfsGateway\n  );\n\n  const dispatch = useDispatch();\n\n  // chakra hooks\n  // const toast = useToast();\n\n  // contract hooks\n  const totalSupply = useTotalSupply(activeContractAddress);\n  const [tokensByIndex] = useTokenByIndex(activeContractAddress, [0]);\n  const initialValue = tokensByIndex ? tokensByIndex[0] : null;\n\n  // Effect to initialize store with the contract token skeleton data\n  useEffect(() => {\n    if (initialValue && totalSupply && !dataByContract[activeContractAddress]) {\n      dispatch(\n        init({\n          totalSupply: totalSupply.toNumber(),\n          contractAddress: activeContractAddress,\n          initialValue: initialValue.toNumber()\n        })\n      );\n    }\n  }, [\n    dispatch,\n    totalSupply,\n    dataByContract,\n    activeContractAddress,\n    initialValue\n  ]);\n\n  const pendingUriTokensRef = useRef<number[]>([]);\n  const tokenURIs = useTokenURI(\n    activeContractAddress,\n    pendingUriTokensRef.current\n  );\n\n  // Effect that activates after totalSupply is obtained, and store has been initialized\n  // Finds the next tokens that have not yet get any uri\n  useEffect(() => {\n    if (totalSupply && dataByContract[activeContractAddress]) {\n      let list: number[] = [];\n      Object.keys(dataByContract[activeContractAddress]).forEach(key => {\n        if (!dataByContract[activeContractAddress][key].uri) {\n          list = [...list, parseInt(key)];\n        }\n      });\n\n      list = list.filter((_, index) => index <= 500);\n      pendingUriTokensRef.current = list;\n    }\n  }, [activeContractAddress, dispatch, totalSupply, dataByContract]);\n\n  // Effect that dispatches the uris that are present from blockchain\n  // but not yet present in the store\n  const stringCache = JSON.stringify(tokenURIs);\n  useEffect(() => {\n    if (totalSupply && dataByContract[activeContractAddress]) {\n      let tokensToDispatch: any[] = [];\n      let tokensToDispatchIds: any[] = [];\n\n      pendingUriTokensRef.current.forEach((t, index) => {\n        if (tokenURIs[index] && !dataByContract[activeContractAddress][t].uri) {\n          // TODO Optimize this\n          tokensToDispatch = [\n            ...tokensToDispatch,\n            { tokenId: t, uri: tokenURIs[index][0] }\n          ];\n          tokensToDispatchIds = [...tokensToDispatchIds, t];\n        }\n      });\n\n      if (tokensToDispatch.length) {\n        dispatch(\n          setMetadataURI({\n            contractAddress: activeContractAddress,\n            tokens: tokensToDispatch\n          })\n        );\n      }\n    }\n  }, [\n    activeContractAddress,\n    stringCache,\n    pendingUriTokensRef,\n    totalSupply,\n    dataByContract,\n    dispatch,\n    tokenURIs\n  ]);\n\n  const containerWidth = window.innerWidth * 0.9;\n  const wrongNetWork = chainId !== configChainId;\n  const finishedRef: any = useRef([]);\n  // const [useCorsProxy] = useState<boolean>(true);\n  const [tokenModal, setTokenModal] = useState<number | null>(null);\n\n  // Array of tokens that have downloaded JSON Metadata\n  const fetchedRef: any = useRef(\n    dataByContract[activeContractAddress]\n      ? Object.keys(dataByContract[activeContractAddress])\n          .filter(key => dataByContract[activeContractAddress][key].json)\n          .map(e => parseInt(e))\n      : []\n  );\n\n  // Callback for obraining the JSON Metadata\n  const fetchTokenJSON = useCallback(\n    async (tokenId: number) => {\n      if (\n        !dataByContract[activeContractAddress] ||\n        !dataByContract[activeContractAddress][tokenId]\n      ) {\n        return;\n      }\n      let uri = dataByContract[activeContractAddress][tokenId].uri;\n\n      try {\n        if (uri.startsWith(\"ipfs:\")) {\n          uri = ipfsGatewayUrl(uri, ipfsGateway);\n        } else if (corsProxyUrl) {\n          // uri = \"https://cors-anywhere.herokuapp.com/\" + uri;\n          uri = corsProxyUrl + uri;\n        }\n\n        const response = await fetch(uri, {\n          headers: { Origin: \"http://localhost\" }\n        });\n        const data = await response.text();\n\n        dispatch(\n          setMetadataJSON({\n            contractAddress: activeContractAddress,\n            tokens: [{ tokenId, json: JSON.parse(data) }]\n          })\n        );\n        fetchedRef.current = [...fetchedRef.current, tokenId];\n        return data;\n      } catch (error) {\n        const timeout = timeoutsRef.current[tokenId];\n        clearTimeout(timeout);\n\n        let newTimeoutsRef = { ...timeoutsRef.current };\n        delete newTimeoutsRef[tokenId];\n        timeoutsRef.current = newTimeoutsRef;\n\n        counterRef.current = 0;\n        console.log(error);\n      }\n    },\n    [dataByContract, activeContractAddress, dispatch, corsProxyUrl, ipfsGateway]\n  );\n\n  // TODO: Make this cancelable\n  const fetchViewportJSON = debounce(async () => {\n    counterRef.current = 0;\n    let sleepCounter = 1;\n\n    Object.values(timeoutsRef.current).forEach((e: any) => {\n      if (e && e.controller) {\n        e.controller.abort();\n      }\n    });\n\n    timeoutsRef.current = {};\n    for (\n      let index = cellRendererListRef.current.includes(1)\n        ? 0\n        : Math.floor(cellRendererListRef.current.length / 3);\n      index < cellRendererListRef.current.length;\n      index++\n    ) {\n      if (!fetchedRef.current.includes(cellRendererListRef.current[index])) {\n        await sleep(sleepCounter * 500);\n        // It checks again if not exists on fetchedRef, because maybe it changed\n        if (!fetchedRef.current.includes(cellRendererListRef.current[index])) {\n          fetchTokenJSON(cellRendererListRef.current[index]);\n        }\n        sleepCounter++;\n      }\n    }\n  }, 2000);\n\n  // Event that is triggered after a scroll is made on the page\n  useEffect(() => {\n    window.addEventListener(\"scroll\", fetchViewportJSON);\n    return () => {\n      window.removeEventListener(\"scroll\", fetchViewportJSON);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeContractAddress, dataByContract]);\n\n  // List of Tokens rendered\n  let cellRendererList: number[] = [];\n\n  // Reference of the cell values rendered\n  const cellRendererListRef = useRef(cellRendererList);\n  cellRendererListRef.current = cellRendererList;\n\n  // Callback called when the image delay is finished\n  let toggle = true;\n  const addFinishedDelay = () => {\n    if (toggle) {\n      finishedRef.current = cellRendererList;\n      toggle = false;\n      forceUpdate();\n    }\n  };\n\n  const loadedUris =\n    dataByContract &&\n    dataByContract[activeContractAddress] &&\n    Object.values(dataByContract[activeContractAddress]).every(\n      (e: any) => e.uri\n    );\n\n  const prevLoadedUris = usePrevious(loadedUris);\n  const prevActiveContractAddress = usePrevious(activeContractAddress);\n  useEffect(() => {\n    if (prevActiveContractAddress !== activeContractAddress) {\n      Object.values(timeoutsRef.current).forEach((e: any) => {\n        if (e && e.controller) {\n          e.controller.abort();\n        }\n      });\n      setTimeout(() => {\n        timeoutsRef.current = {};\n        loadedRef.current = {};\n        counterRef.current = 0;\n        pendingUriTokensRef.current = [];\n      }, 100);\n    }\n  }, [activeContractAddress, prevActiveContractAddress, fetchViewportJSON]);\n\n  useEffect(() => {\n    if (prevLoadedUris === false && loadedUris === true) {\n      fetchViewportJSON();\n      fetchedRef.current = [];\n    }\n  }, [loadedUris, prevLoadedUris, fetchViewportJSON]);\n\n  // Map of the active timeoutes\n  const timeoutsRef: any = useRef({});\n\n  // Map of the counter used for timeouts\n  const counterRef: any = useRef(0);\n\n  // Map of the tokens already loaded\n  const loadedRef: any = useRef({});\n\n  // Function that receives the token ID, and an sleep time\n  // it will generate the image after sleep is finished\n  const delayCachedImage = async (\n    tokenId: number,\n    sleepTime: number,\n    signal: any\n  ) => {\n    await sleep(sleepTime, signal);\n\n    let img: any = null;\n    img = new window.Image();\n\n    let imgUrl = dataByContract[activeContractAddress][tokenId].json.image;\n    if (imgUrl.startsWith(\"ipfs:\")) {\n      imgUrl = ipfsGatewayUrl(imgUrl, ipfsGateway);\n    }\n\n    img.src = imgUrl;\n    img.onload = () => {\n      // await img.decode();\n      loadedRef.current = { ...loadedRef.current, [tokenId]: img.src };\n\n      let newTimeoutsRef = { ...timeoutsRef.current };\n      delete newTimeoutsRef[tokenId];\n      timeoutsRef.current = newTimeoutsRef;\n\n      forceUpdate();\n    };\n    //\n    await sleep(30000, signal);\n    // If image is not loading, remove the timeout (so it can be created again)\n    if (!img.complete || !img.naturalWidth) {\n      // window.stop();\n      img.src = \"\";\n      let newTimeoutsRef = { ...timeoutsRef.current };\n      delete newTimeoutsRef[tokenId];\n      timeoutsRef.current = newTimeoutsRef;\n    }\n  };\n\n  const missingUri = dataByContract[activeContractAddress]\n    ? Object.values(dataByContract[activeContractAddress]).filter(\n        ({ uri }: any) => !uri\n      ).length\n    : null;\n\n  // Function called for render the dinaymic table\n  const cellRenderer = ({ index, style, ref }: any) => {\n    const times = Math.floor(containerWidth / 200);\n    const start = index * times;\n    const cells = new Array(times)\n      .fill({})\n      .filter((_, index) => start + index < totalSupply.toNumber());\n    for (let i = 0; i < cells.length; i++) {\n      const tokenId = parseInt(\n        Object.keys(dataByContract[activeContractAddress])[start + i]\n      );\n      if (!cellRendererList.includes(tokenId)) {\n        cellRendererList.push(tokenId);\n        // forceUpdate();\n      }\n      if (\n        dataByContract[activeContractAddress][tokenId] &&\n        dataByContract[activeContractAddress][tokenId].json &&\n        finishedRef.current.includes(tokenId) &&\n        !timeoutsRef.current[tokenId] &&\n        !loadedRef.current[tokenId]\n      ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        const promise = delayCachedImage(tokenId, counterRef.current, signal);\n        timeoutsRef.current = {\n          ...timeoutsRef.current,\n          [tokenId]: { promise, controller }\n        };\n        counterRef.current = counterRef.current + 500;\n      }\n    }\n\n    return (\n      <Flex direction=\"row\" justify=\"center\" style={style}>\n        {cells.map((_, index) => {\n          const tokenId = parseInt(\n            Object.keys(dataByContract[activeContractAddress])[start + index]\n          );\n\n          return (\n            <Link\n              key={`${tokenId}-${index}`}\n              onClick={() => {\n                loadedRef.current[tokenId] && setTokenModal(tokenId);\n              }}\n            >\n              <Box position=\"relative\" _hover={{ background: \"blue\" }}>\n                <Flex\n                  height=\"200px\"\n                  width=\"200px\"\n                  bg=\"gray.900\"\n                  opacity={loadedRef.current[tokenId] ? 0 : 1}\n                  position=\"absolute\"\n                  top=\"0\"\n                  _hover={{ opacity: \"0.9\" }}\n                  justify=\"center\"\n                  align=\"center\"\n                  direction=\"column\"\n                >\n                  <Text fontSize={40}>#{tokenId}</Text>\n                  {!loadedRef.current[tokenId] ? (\n                    <Flex>\n                      <Text ml={2} fontSize={10}>\n                        LOADING...\n                      </Text>\n                    </Flex>\n                  ) : null}\n                </Flex>\n                <DelayedImage\n                  setFinishedDelay={addFinishedDelay}\n                  boxSize=\"200px\"\n                  index={index}\n                  alt={`${tokenId}`}\n                  title={`${tokenId}`}\n                  loading=\"lazy\"\n                  tokenId={tokenId}\n                  src={loadedRef.current[tokenId]}\n                  metadata={\n                    (dataByContract[activeContractAddress][tokenId] &&\n                      dataByContract[activeContractAddress][tokenId].json) ??\n                    undefined\n                  }\n                  isFinishedDelay={finishedRef.current.includes(tokenId)}\n                  isLoadedImage={loadedRef.current[tokenId]}\n                />\n              </Box>\n            </Link>\n          );\n        })}\n      </Flex>\n    );\n  };\n\n  return (\n    <Fragment>\n      {totalSupply && loadedUris ? (\n        <Fragment>\n          {tokenModal !== null ? (\n            <GalleryModal\n              tokenId={tokenModal}\n              imgUrl={loadedRef.current[tokenModal]}\n              onClose={() => {\n                setTokenModal(null);\n              }}\n            />\n          ) : null}\n\n          <Flex direction=\"column\" align=\"center\">\n            <Flex wrap=\"wrap\" justify=\"center\">\n              <div\n                id=\"virtualContainer\"\n                style={{ width: containerWidth, height: \"100%\" }}\n              >\n                <ReactWindowScroller>\n                  {({ ref, outerRef, style, onScroll }: any) => (\n                    <List\n                      style={style}\n                      outerRef={outerRef}\n                      ref={ref}\n                      height={window.innerHeight}\n                      itemCount={Math.ceil(\n                        totalSupply.toNumber() /\n                          Math.floor(containerWidth / 200)\n                      )}\n                      itemSize={200}\n                      width={window.innerWidth}\n                      onScroll={onScroll}\n                    >\n                      {cellRenderer}\n                    </List>\n                  )}\n                </ReactWindowScroller>\n              </div>\n            </Flex>\n          </Flex>\n        </Fragment>\n      ) : (\n        <Flex height=\"50vh\" align=\"center\" justify=\"center\" direction=\"column\">\n          <Box color=\"gray.700\">\n            <Spinner />\n          </Box>\n          <Box mt={2}>\n            <Text textAlign=\"center\">\n              {\" \"}\n              {!wrongNetWork\n                ? `Loading data from the blockchain, please wait.. ${\n                    totalSupply && missingUri !== totalSupply.toNumber()\n                      ? `[${missingUri} / ${\n                          totalSupply ? totalSupply.toNumber() : \"\"\n                        }]`\n                      : \"\"\n                  }`\n                : \"Please connect to Ethereum Network\"}\n            </Text>\n          </Box>\n        </Flex>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Gallery;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\ninterface OptionState {\n  corsProxyUrl: string | null;\n  ipfsGateway: string;\n}\n\nexport const initialState: OptionState = {\n  corsProxyUrl:\n    \"https://e6bp05g0dh.execute-api.us-east-1.amazonaws.com/dev?url=\",\n  ipfsGateway: \"infura-ipfs.io\"\n};\n\nexport const optionsSlice = createSlice({\n  name: \"options\",\n  initialState,\n  reducers: {\n    setCorsProxyUrl: (state, action) => {\n      state.corsProxyUrl = action.payload;\n    },\n    setIpfsGateway: (state, action) => {\n      state.ipfsGateway = action.payload;\n    }\n  }\n});\n\nexport const { setCorsProxyUrl, setIpfsGateway } = optionsSlice.actions;\n\nexport default optionsSlice.reducer;\n","const presets: any[] = [\n  {\n    name: \"Pudgy Penguins\",\n    address: \"0xBd3531dA5CF5857e7CfAA92426877b022e612cf8\"\n  },\n  { name: \"Cool Cats\", address: \"0x1A92f7381B9F03921564a437210bB9396471050C\" },\n  {\n    name: \"Boonji Project\",\n    address: \"0x4cd0ea8b1bDb5ab9249d96cCF3d8A0d3aDa2Bc76\"\n  },\n  {\n    name: \"Lazy Lions\",\n    address: \"0x8943C7bAC1914C9A7ABa750Bf2B6B09Fd21037E0\",\n    options: { cors: true }\n  },\n  {\n    name: \"World Of Women\",\n    address: \"0xe785E82358879F061BC3dcAC6f0444462D4b5330\",\n    options: { cors: true }\n  },\n  {\n    name: \"Creature World\",\n    address: \"0xc92cedDfb8dd984A89fb494c376f9A48b999aAFc\",\n    options: { cors: true }\n  },\n  {\n    name: \"DeadFellaz\",\n    address: \"0x2acAb3DEa77832C09420663b0E1cB386031bA17B\",\n    options: { cors: true }\n  },\n  {\n    name: \"Stoner Cats\",\n    address: \"0xD4d871419714B778eBec2E22C7c53572b573706e\",\n    options: { cors: true }\n  },\n  {\n    name: \"Desperate ApeWives\",\n    address: \"0xF1268733C6FB05EF6bE9cF23d24436Dcd6E0B35E\",\n    options: { cors: true }\n  },\n  {\n    name: \"Bored Ape Yacht Club\",\n    address: \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\",\n    options: { cors: true }\n  }\n];\n\nexport default presets;\n","// The name of the gateway should be included in the switch case on\n// src/helpers/ipfsGatewayUrl.ts\n\nconst ipsGateways: any[] = [\n  {\n    name: \"cloudflare-ipfs.com\"\n  },\n  {\n    name: \"dweb.link\"\n  },\n  {\n    name: \"infura-ipfs.io\"\n  }\n];\n\nexport default ipsGateways;\n","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Flex,\n  Box,\n  Button,\n  Input,\n  Heading,\n  Select,\n  FormControl,\n  FormLabel\n} from \"@chakra-ui/react\";\n\nimport { RootState } from \"./redux/store\";\n\nimport { changeActiveContractAddress } from \"./redux/contractsSlice\";\nimport {\n  initialState as optionsInitialState,\n  setCorsProxyUrl,\n  setIpfsGateway\n} from \"./redux/optionsSlice\";\nimport presets from \"./presets\";\nimport ipfsGateways from \"./ipsGateways\";\n\nconst Header = () => {\n  const activeContractAddress = useSelector(\n    ({ contracts: { activeContractAddress } }: RootState) =>\n      activeContractAddress\n  );\n  const corsProxyUrl = useSelector(\n    ({ options: { corsProxyUrl } }: RootState) => corsProxyUrl\n  );\n  const ipfsGateway = useSelector(\n    ({ options: { ipfsGateway } }: RootState) => ipfsGateway\n  );\n  const dispatch = useDispatch();\n  const [formContractAddress, setFormContractAddress] = useState<string>(\n    activeContractAddress\n  );\n  const [formIpfsGatewayUrl, serFormIpfsGatewayUrl] = useState<string>(\n    ipfsGateway\n  );\n  const [firstFormIpfsGatewayUrl, setFirstFormIpfsGatewayUrl] = useState<\n    string\n  >(ipfsGateway);\n  const [preset, setPreset] = useState(\n    presets.find(({ address }) => address === activeContractAddress)\n      ? presets.find(({ address }) => address === activeContractAddress).address\n      : \"\"\n  );\n  const [showOptions, setShowOptions] = useState<boolean>(false);\n  const [formCorsProxyUrl, setFormCorsProxyUrl] = useState<string>(\n    corsProxyUrl == null ? \"\" : corsProxyUrl\n  );\n  const [firstFormCorsProxyUrl, setFirstFormCorsProxyUrl] = useState<\n    string | null\n  >(corsProxyUrl == null ? \"\" : corsProxyUrl);\n\n  return (\n    <Box\n      id=\"header\"\n      as=\"header\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      width=\"100%\"\n      p={0}\n      alignItems=\"center\"\n    >\n      <Flex borderRadius=\"20px\" bg=\"gray.600\" p={4} m={5} justify=\"center\">\n        <Flex width=\"800px\" direction=\"column\">\n          <Heading textAlign=\"center\" as=\"h1\">\n            NFT Explorer\n          </Heading>\n          <Box textAlign=\"center\">\n            Enter any Contract Address of an NFT Collection or select any of the\n            available presets\n          </Box>\n          <Flex justify=\"space-around\" align=\"center\" height=\"100%\">\n            <Select\n              width=\"250px\"\n              onChange={({ target: { value } }) => {\n                setPreset(value);\n                if (value) {\n                  setFormContractAddress(value);\n                  dispatch(changeActiveContractAddress(value));\n                }\n              }}\n              value={preset}\n            >\n              {presets.map(({ name, address }) => (\n                <option key={address} value={address}>\n                  {name}\n                </option>\n              ))}\n              <option key=\"other\" value=\"\">\n                Other\n              </option>\n            </Select>\n            <Input\n              ml=\"5px\"\n              minWidth=\"420px\"\n              placeholder=\"Address\"\n              value={formContractAddress}\n              onChange={({ target: { value } }) => {\n                setFormContractAddress(value);\n              }}\n            />\n            <Button\n              ml=\"5px\"\n              onClick={() => {\n                dispatch(changeActiveContractAddress(formContractAddress));\n\n                setPreset(\n                  presets.find(({ address }) => address === formContractAddress)\n                    ? presets.find(\n                        ({ address }) => address === formContractAddress\n                      ).address\n                    : \"\"\n                );\n              }}\n            >\n              Go\n            </Button>\n            <Button\n              ml=\"5px\"\n              onClick={() => {\n                setShowOptions(!showOptions);\n              }}\n            >\n              Options\n            </Button>\n          </Flex>\n          {showOptions ? (\n            <Flex\n              direction=\"column\"\n              m={4}\n              p={4}\n              borderWidth=\"2px\"\n              borderRadius=\"12px\"\n            >\n              <Flex direction=\"column\">\n                <FormControl id=\"corsProxy\">\n                  <FormLabel>CORS Proxy</FormLabel>\n                  <Input\n                    ml=\"5px\"\n                    minWidth=\"420px\"\n                    placeholder=\"\"\n                    value={formCorsProxyUrl}\n                    onChange={({ target: { value } }) => {\n                      setFormCorsProxyUrl(value);\n                    }}\n                  />\n                </FormControl>\n                <FormControl id=\"ipfsGateway\" mt={3}>\n                  <FormLabel>IPFS Gateway</FormLabel>\n                  <Select\n                    value={formIpfsGatewayUrl}\n                    onChange={({ target: { value } }) => {\n                      serFormIpfsGatewayUrl(value);\n                    }}\n                  >\n                    {ipfsGateways.map(({ name }) => (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Flex>\n              <Flex mt={3} justify=\"end\">\n                <Button\n                  onClick={() => {\n                    dispatch(setCorsProxyUrl(formCorsProxyUrl));\n                    dispatch(setIpfsGateway(formIpfsGatewayUrl));\n                    setShowOptions(false);\n                    setFirstFormIpfsGatewayUrl(formIpfsGatewayUrl);\n                    setFirstFormCorsProxyUrl(formCorsProxyUrl);\n                  }}\n                  isDisabled={\n                    firstFormCorsProxyUrl === formCorsProxyUrl &&\n                    firstFormIpfsGatewayUrl === formIpfsGatewayUrl\n                  }\n                >\n                  Update\n                </Button>\n                <Button\n                  ml={2}\n                  isDisabled={\n                    optionsInitialState.corsProxyUrl === formCorsProxyUrl &&\n                    optionsInitialState.ipfsGateway === formIpfsGatewayUrl\n                  }\n                  onClick={() => {\n                    setFormCorsProxyUrl(\n                      optionsInitialState.corsProxyUrl == null\n                        ? \"\"\n                        : optionsInitialState.corsProxyUrl\n                    );\n                    serFormIpfsGatewayUrl(optionsInitialState.ipfsGateway);\n                    dispatch(setCorsProxyUrl(optionsInitialState.corsProxyUrl));\n                    dispatch(setIpfsGateway(optionsInitialState.ipfsGateway));\n                    setShowOptions(false);\n                    setFirstFormIpfsGatewayUrl(optionsInitialState.ipfsGateway);\n                    setFirstFormCorsProxyUrl(optionsInitialState.corsProxyUrl);\n                  }}\n                >\n                  Reset\n                </Button>\n              </Flex>\n            </Flex>\n          ) : null}\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\nexport default Header;\n","import { useEffect, useState, Fragment } from \"react\";\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport { RootState } from \"./redux/store\";\nimport useTokenByIndex from \"./hooks/useTokenByIndex\";\nimport useTotalSupply from \"./hooks/useTotalSupply\";\nimport { useSelector } from \"react-redux\";\n\nconst Navigator = () => {\n  const activeContractAddress = useSelector(\n    ({ contracts: { activeContractAddress } }: RootState) =>\n      activeContractAddress\n  );\n  const dataByContract = useSelector(\n    ({ contracts: { dataByContract } }: RootState) => dataByContract\n  );\n  const totalSupply = useTotalSupply(activeContractAddress);\n  const [tokensByIndex] = useTokenByIndex(activeContractAddress, [0]);\n  const initialValue = tokensByIndex ? tokensByIndex[0] : null;\n\n  const [indicatorPosition, setIndicatorPosition] = useState({ x: 50, y: 0 });\n  const [scrollPercentage, setScrollPercentage] = useState(0);\n  useEffect(() => {\n    const fn = (e: any) => {\n      const yPos =\n        (window.scrollY / document.body.offsetHeight) * window.innerHeight;\n\n      setScrollPercentage(window.scrollY / document.body.offsetHeight);\n      setIndicatorPosition({ x: indicatorPosition.x, y: yPos });\n    };\n\n    window.addEventListener(\"scroll\", fn);\n    return () => {\n      window.removeEventListener(\"scroll\", fn);\n    };\n  }, [indicatorPosition]);\n\n  const numItems = 8;\n  let chunks: number[] = [];\n  if (\n    totalSupply &&\n    initialValue &&\n    dataByContract[activeContractAddress] &&\n    Object.values(dataByContract[activeContractAddress]).length\n  ) {\n    let increase = Math.floor(totalSupply.toNumber() / (numItems + 1));\n    let items: any = [];\n    for (let i = 1; i < numItems + 1; i++) {\n      items = [\n        ...items,\n        items.length ? items[items.length - 1] + increase : increase\n      ];\n    }\n\n    chunks = [\n      initialValue.toNumber(),\n      ...items,\n      Object.keys(dataByContract[activeContractAddress])[\n        Object.keys(dataByContract[activeContractAddress]).length - 1\n      ]\n    ];\n  }\n\n  const loadedUris =\n    dataByContract &&\n    dataByContract[activeContractAddress] &&\n    Object.values(dataByContract[activeContractAddress]).every(\n      (e: any) => e.uri\n    );\n\n  const isReady =\n    loadedUris &&\n    totalSupply &&\n    initialValue &&\n    dataByContract[activeContractAddress];\n  const offset = 1000;\n  let itemView = totalSupply ? totalSupply.toNumber() * scrollPercentage : 1;\n\n  return isReady ? (\n    <Fragment>\n      <Flex\n        position=\"fixed\"\n        right=\"0\"\n        top=\"0\"\n        width=\"70px\"\n        height=\"100vh\"\n        direction=\"column\"\n        justify=\"space-between\"\n      >\n        {chunks.map((num, index) => {\n          let growthPercentage: number | null = null;\n          if (itemView >= num && itemView < num + offset) {\n            growthPercentage = itemView === 0 ? 0 : (itemView - num) / offset;\n          } else if (itemView <= num && itemView > num - offset) {\n            growthPercentage = (num - itemView) / offset;\n          }\n          return (\n            <Box\n              key={index}\n              textAlign=\"end\"\n              mr={2}\n              fontSize={\n                growthPercentage != null ? 20 - 10 * growthPercentage : 10\n              }\n            >\n              {num}\n            </Box>\n          );\n        })}\n      </Flex>\n      <Box\n        display=\"none\"\n        position=\"fixed\"\n        fontSize={10}\n        right={indicatorPosition.x}\n        top={indicatorPosition.y}\n      >\n        -\n      </Box>\n    </Fragment>\n  ) : null;\n};\nexport default Navigator;\n","import { Box } from \"@chakra-ui/react\";\n\nimport \"./App.css\";\n\nimport Gallery from \"./Gallery\";\nimport Header from \"./Header\";\nimport Navigator from \"./Navigator\";\n\nconst App = () => {\n  return (\n    <Box>\n      <Navigator/>\n      <Header />\n      <Box as=\"main\" pt=\"10px\">\n        <Gallery />\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false\n};\n\nconst theme = extendTheme({ config });\nexport default theme;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport contractsReducer from \"./contractsSlice\";\nimport optionsReducer from \"./optionsSlice\";\nimport { save, load } from \"redux-localstorage-simple\";\n\nconst store = configureStore({\n  reducer: {\n    contracts: contractsReducer,\n    options: optionsReducer\n  },\n  middleware: [\n    save({ states: [\"contracts\", \"options\"], namespace: \"localdata\" })\n  ],\n  preloadedState: load({\n    states: [\"contracts\", \"options\"],\n    namespace: \"localdata\"\n  })\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\nimport { DAppProvider } from \"@usedapp/core\";\nimport { ColorModeScript } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport { configChainId, alchemyApi } from \"./constants\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nconst config = {\n  readOnlyChainId: configChainId,\n  readOnlyUrls: {\n    [configChainId]: alchemyApi\n  }\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <DAppProvider config={config}>\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </DAppProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}