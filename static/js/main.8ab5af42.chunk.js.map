{"version":3,"sources":["redux/contractsSlice.ts","hooks/useTotalSupply.ts","hooks/useTokenURI.ts","hooks/useTokenByIndex.ts","hooks/usePrevious.ts","hooks/useForceUpdate.ts","constants.ts","GalleryModal.tsx","helpers/sleep.ts","DelayedImage.tsx","helpers/ipfsGatewayUrl.ts","Gallery.tsx","redux/optionsSlice.ts","presets.ts","ipsGateways.ts","Header.tsx","Navigator.tsx","App.tsx","theme.ts","redux/store.ts","index.tsx"],"names":["contractsSlice","createSlice","name","initialState","dataByContract","activeContractAddress","reducers","init","state","action","payload","contractAddress","contractMap","i","initialValue","totalSupply","setMetadataURI","tokens","forEach","tokenId","uri","setMetadataJSON","json","image","changeActiveContractAddress","actions","contractInterface","ethers","utils","Interface","ERC721","abi","useTotalSupply","useContractCall","address","method","args","useTokenURI","indexes","useContractCalls","map","index","useTokenByIndex","usePrevious","value","ref","useRef","useEffect","current","useForceUpdate","useState","setValue","process","REACT_APP_ALCHEMY_API","REACT_APP_CHAIN_ID","REACT_APP_ETHERSCAN_URL","REACT_APP_SITE_URL","alchemyApi","configChainId","parseInt","GalleryModal","imgUrl","onClose","resize","window","addEventListener","removeEventListener","width","innerWidth","height","innerHeight","setWindowSize","dimension","setDimension","isOpen","closeOnOverlayClick","motionPreset","size","margin","bg","display","justifyContent","onClick","e","element","target","classList","contains","justify","align","className","maxWidth","objectFit","src","sleep","ms","signal","Promise","resolve","reject","timeout","setTimeout","clearTimeout","DelayedImage","boxSize","alt","title","loading","setFinishedDelay","isFinishedDelay","isLoadedImage","metadata","itemSize","a","delayed","ipfsGatewayUrl","ipfsGateway","hash","slice","splitHash","split","transformedHash","cids","toV1","toString","Gallery","forceUpdate","chainId","useEthers","dispatch","useDispatch","useSelector","contracts","corsProxyUrl","options","containerWidth","wrongNetWork","missingUri","Object","values","filter","length","loadedUris","every","tokenModal","setTokenModal","setItemSize","delayFinishedTokens","pendingUriTokens","downloadedMetadataTokens","keys","key","imageDelayCounter","jsonDelayCounter","delayedImagesMap","delayedJsonMap","imagesLoadedMap","initialToken","tokenURIs","toNumber","list","_","stringCache","JSON","stringify","tokensToDispatch","tokensToDispatchIds","t","refreshViewport","debounce","controller","abort","prevActiveContractAddress","prevLoadedUris","fetchTokenJSON","useCallback","startsWith","fetch","response","text","data","parse","console","log","toggle","addFinishedDelay","cellRendererList","delayCachedImage","sleepTime","img","Image","onload","aborted","newDelayedImagesMap","complete","naturalWidth","AbortController","promise","delayJson","cellRenderer","style","times","Math","floor","start","cells","Array","fill","includes","push","direction","position","_hover","background","opacity","top","fontSize","ml","undefined","wrap","id","outerRef","onScroll","itemCount","ceil","p","mt","color","textAlign","optionsSlice","setCorsProxyUrl","setIpfsGateway","presets","cors","ipsGateways","Header","formContractAddress","setFormContractAddress","formIpfsGatewayUrl","serFormIpfsGatewayUrl","firstFormIpfsGatewayUrl","setFirstFormIpfsGatewayUrl","find","preset","setPreset","showOptions","setShowOptions","formCorsProxyUrl","setFormCorsProxyUrl","firstFormCorsProxyUrl","setFirstFormCorsProxyUrl","as","flexDirection","alignItems","borderRadius","m","pt","pb","base","md","onChange","placeholder","borderWidth","ipfsGateways","isDisabled","optionsInitialState","Navigator","tokensByIndex","x","y","indicatorPosition","setIndicatorPosition","scrollPercentage","setScrollPercentage","fn","yPos","scrollY","document","body","offsetHeight","chunks","increase","items","numItems","isReady","offset","itemView","right","num","growthPercentage","mr","App","pr","theme","extendTheme","config","initialColorMode","useSystemColorMode","store","configureStore","reducer","contractsReducer","optionsReducer","middleware","save","states","namespace","preloadedState","load","readOnlyChainId","readOnlyUrls","ReactDOM","render","StrictMode","DAppProvider","getElementById"],"mappings":"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","file":"static/js/main.8ab5af42.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\ninterface ContractState {\n  activeContractAddress: string;\n  dataByContract: any;\n}\n\nconst initialState: ContractState = {\n  dataByContract: {},\n  activeContractAddress: \"0xBd3531dA5CF5857e7CfAA92426877b022e612cf8\"\n};\n\nexport const contractsSlice = createSlice({\n  name: \"contracts\",\n  initialState,\n  reducers: {\n    init: (state, action) => {\n      if (!state.dataByContract[action.payload.contractAddress]) {\n        let contractMap: { [index: number]: any } = {};\n        for (\n          let i = action.payload.initialValue;\n          i < action.payload.totalSupply + action.payload.initialValue;\n          i++\n        ) {\n          contractMap[i] = {};\n        }\n        state.dataByContract[action.payload.contractAddress] = contractMap;\n      }\n    },\n    setMetadataURI: (state, action) => {\n      action.payload.tokens.forEach(({ tokenId, uri }: any) => {\n        state.dataByContract[action.payload.contractAddress][tokenId].uri = uri;\n      });\n    },\n    setMetadataJSON: (state, action) => {\n      action.payload.tokens.forEach(({ tokenId, json }: any) => {\n        state.dataByContract[action.payload.contractAddress][tokenId].json = {\n          image: json.image,\n          name: json.name\n        };\n      });\n    },\n    changeActiveContractAddress: (state, action) => {\n      state.activeContractAddress = action.payload;\n    }\n  }\n});\n\nexport const {\n  setMetadataURI,\n  setMetadataJSON,\n  changeActiveContractAddress,\n  init\n} = contractsSlice.actions;\n\nexport default contractsSlice.reducer;\n","import { ethers } from \"ethers\";\nimport { useContractCall } from \"@usedapp/core\";\nimport ERC721 from \"../abi/ERC721.json\";\n// import { contractAddress } from \"../constants.js\";\n\nconst contractInterface = new ethers.utils.Interface(ERC721.abi);\n\nconst useTotalSupply = (contractAddress: string) => {\n  const [totalSupply]: any =\n    useContractCall({\n      abi: contractInterface,\n      address: contractAddress,\n      method: \"totalSupply\",\n      args: []\n    }) ?? [];\n  return totalSupply;\n};\nexport default useTotalSupply;\n","import { ethers } from \"ethers\";\nimport { useContractCalls } from \"@usedapp/core\";\nimport ERC721 from \"../abi/ERC721.json\";\n// import { contractAddress } from \"../constants.js\";\n\nconst contractInterface = new ethers.utils.Interface(ERC721.abi);\n\nconst useTokenURI = (contractAddress: string, indexes: number[]) => {\n  const tokenURI: any =\n    useContractCalls(\n      indexes.map(index => ({\n        abi: contractInterface,\n        address: contractAddress,\n        method: \"tokenURI\",\n        args: [index]\n      }))\n    ) ?? null;\n  return tokenURI;\n};\nexport default useTokenURI;\n","import { ethers } from \"ethers\";\nimport { useContractCalls } from \"@usedapp/core\";\nimport ERC721 from \"../abi/ERC721.json\";\n\nconst contractInterface = new ethers.utils.Interface(ERC721.abi);\n\nconst useTokenByIndex = (contractAddress: string, indexes: number[]) => {\n  const tokenByIndex: any =\n    useContractCalls(\n      indexes.map(index => ({\n        abi: contractInterface,\n        address: contractAddress,\n        method: \"tokenByIndex\",\n        args: [index]\n      }))\n    ) ?? null;\n  return tokenByIndex;\n};\nexport default useTokenByIndex;\n","import { useEffect, useRef } from \"react\";\nconst usePrevious = (value: any) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePrevious;\n","import { useState } from \"react\";\nconst useForceUpdate = () => {\n  const [, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n};\nexport default useForceUpdate;\n","const {\n  REACT_APP_ALCHEMY_API,\n  REACT_APP_CHAIN_ID,\n  REACT_APP_ETHERSCAN_URL,\n  REACT_APP_SITE_URL\n} = process.env;\n\nexport const alchemyApi: string = `${REACT_APP_ALCHEMY_API}`;\nexport const configChainId: number = REACT_APP_CHAIN_ID\n  ? parseInt(REACT_APP_CHAIN_ID)\n  : 0;\nexport const etherScanUrl: string = `${REACT_APP_ETHERSCAN_URL}`;\nexport const siteUrl: string = `${REACT_APP_SITE_URL}`;\n","import { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  Image,\n  Flex\n} from \"@chakra-ui/react\";\n\nconst GalleryModal = ({ tokenId, imgUrl, onClose }: GalleryModalProps) => {\n  useEffect(() => {\n    resize();\n    window.addEventListener(\"resize\", () => {\n      resize();\n    });\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  const [, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [dimension, setDimension] = useState(\"width\");\n\n  const resize = () => {\n    if (window.innerWidth > window.innerHeight) {\n      setDimension(\"height\");\n    } else {\n      setDimension(\"width\");\n    }\n    setWindowSize({\n      height: window.innerHeight,\n      width: window.innerWidth\n    });\n  };\n\n  return (\n    <Modal\n      isOpen={tokenId !== null}\n      onClose={onClose}\n      closeOnOverlayClick\n      motionPreset=\"none\"\n      size={\"full\"}\n    >\n      <ModalOverlay />\n      <ModalContent margin=\"0\" bg=\"rgba(0,0,0,0.5)\">\n        <ModalBody\n          display=\"flex\"\n          justifyContent=\"center\"\n          onClick={e => {\n            const element = e.target as HTMLElement;\n            if (\n              element.classList.contains(\"chakra-modal__body\") ||\n              element.classList.contains(\"image-container\")\n            ) {\n              onClose();\n            }\n          }}\n        >\n          <Flex\n            height=\"\"\n            justify=\"center\"\n            align=\"center\"\n            className=\"image-container\"\n          >\n            <Image\n              maxWidth=\"none\"\n              height={dimension === \"height\" ? \"calc(100vh - 50px)\" : \"auto\"}\n              width={dimension === \"width\" ? \"calc(100vw - 50px)\" : \"auto\"}\n              objectFit=\"cover\"\n              src={imgUrl}\n            />\n          </Flex>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport interface GalleryModalProps {\n  tokenId: number;\n  imgUrl: string;\n  onClose: () => any;\n}\nexport default GalleryModal;\n","const sleep = (ms: number, signal?: any) =>\n  new Promise((resolve, reject) => {\n    let timeout: any;\n\n    const abortHandler = () => {\n      clearTimeout(timeout);\n      //reject();\n    };\n\n    timeout = setTimeout(resolve, ms);\n\n    signal?.addEventListener(\"abort\", abortHandler);\n    return timeout;\n  });\nexport default sleep;\n","import { useEffect } from \"react\";\nimport { Image, Flex } from \"@chakra-ui/react\";\nimport sleep from \"./helpers/sleep\";\n\ninterface DelayedImageProps {\n  boxSize: string;\n  alt: string;\n  title: string;\n  src: string;\n  index: number;\n  loading: \"eager\" | \"lazy\" | undefined;\n  tokenId: number;\n  setFinishedDelay: (newImage: number) => void;\n  isFinishedDelay: boolean;\n  isLoadedImage: boolean;\n  metadata: any;\n  itemSize: number;\n}\n\nconst DelayedImage = ({\n  boxSize,\n  alt,\n  title,\n  loading,\n  tokenId,\n  src,\n  index,\n  setFinishedDelay,\n  isFinishedDelay,\n  isLoadedImage,\n  metadata,\n  itemSize\n}: DelayedImageProps) => {\n  useEffect(() => {\n    const delayed = async () => {\n      await sleep(1500);\n      if (!isFinishedDelay) {\n        setFinishedDelay(tokenId);\n      }\n    };\n    delayed();\n  }, [isFinishedDelay, setFinishedDelay, tokenId, index]);\n\n  return isFinishedDelay && isLoadedImage && metadata && metadata.image ? (\n    <Image\n      boxSize={itemSize}\n      alt={alt}\n      title={title}\n      loading={loading}\n      src={src}\n    />\n  ) : (\n    <Flex height={itemSize} width={itemSize}></Flex>\n  );\n};\nexport default DelayedImage;\n","import cids from \"cids\";\nconst ipfsGatewayUrl = (uri: string, ipfsGateway: string): string => {\n  const hash = uri.slice(7);\n  switch (ipfsGateway) {\n    case \"cloudflare-ipfs.com\":\n      return `https://${ipfsGateway}/ipfs/${hash}`;\n    case \"dweb.link\":\n    case \"infura-ipfs.io\":\n      const splitHash = hash.split(\"/\");\n      const transformedHash = new cids(splitHash[0]).toV1().toString(\"base32\");\n      return `https://${transformedHash}.ipfs.${ipfsGateway}${\n        splitHash[1] ? `/${splitHash[1]}` : \"\"\n      }`;\n  }\n  return uri;\n};\nexport default ipfsGatewayUrl;\n","import { Fragment, useEffect, useState, useRef, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { ReactWindowScroller } from \"react-window-scroller\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport { useEthers } from \"@usedapp/core\";\nimport { Flex, Box, Text, Spinner, Link } from \"@chakra-ui/react\";\nimport debounce from \"debounce\";\n\nimport { init, setMetadataURI, setMetadataJSON } from \"./redux/contractsSlice\";\nimport { RootState } from \"./redux/store\";\n\nimport useTotalSupply from \"./hooks/useTotalSupply\";\nimport useTokenURI from \"./hooks/useTokenURI\";\nimport useTokenByIndex from \"./hooks/useTokenByIndex\";\nimport usePrevious from \"./hooks/usePrevious\";\nimport useForceUpdate from \"./hooks/useForceUpdate\";\n\nimport { configChainId } from \"./constants\";\n\nimport GalleryModal from \"./GalleryModal\";\nimport DelayedImage from \"./DelayedImage\";\n\nimport ipfsGatewayUrl from \"./helpers/ipfsGatewayUrl\";\nimport sleep from \"./helpers/sleep\";\n\nconst Gallery: React.FC<RouteComponentProps> = () => {\n  // Common hooks\n  const forceUpdate = useForceUpdate();\n\n  // useDapp hooks\n  const { chainId } = useEthers();\n\n  // Redux\n  const dispatch = useDispatch();\n  const dataByContract = useSelector(\n    ({ contracts: { dataByContract } }: RootState) => dataByContract\n  );\n  const activeContractAddress = useSelector(\n    ({ contracts: { activeContractAddress } }: RootState) =>\n      activeContractAddress\n  );\n  const corsProxyUrl = useSelector(\n    ({ options: { corsProxyUrl } }: RootState) => corsProxyUrl\n  );\n  const ipfsGateway = useSelector(\n    ({ options: { ipfsGateway } }: RootState) => ipfsGateway\n  );\n\n  // Calculated\n  const containerWidth = window.innerWidth * 0.9;\n  const wrongNetWork = chainId !== configChainId;\n  const missingUri = dataByContract[activeContractAddress]\n    ? Object.values(dataByContract[activeContractAddress]).filter(\n        ({ uri }: any) => !uri\n      ).length\n    : null;\n  // Flag that indicates all URIs of the gallery have been obtained\n  const loadedUris =\n    dataByContract &&\n    dataByContract[activeContractAddress] &&\n    Object.values(dataByContract[activeContractAddress]).every(\n      (e: any) => e.uri\n    );\n\n  // States\n  // State of the modal, stores the tokenId to show or null if hidden\n  const [tokenModal, setTokenModal] = useState<number | null>(null);\n  // Stores Window sizes, it rerenders page with each resize\n  const [, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [itemSize, setItemSize] = useState(300);\n\n  // References\n  // Array of tokens that finished delaying and ready to load\n  const delayFinishedTokens: any = useRef([]);\n  // Array of tokens that have not yet gotten a URI\n  const pendingUriTokens = useRef<number[]>([]);\n  // Array of tokens that have downloaded JSON Metadata\n  const downloadedMetadataTokens: any = useRef(\n    dataByContract[activeContractAddress]\n      ? Object.keys(dataByContract[activeContractAddress])\n          .filter(key => dataByContract[activeContractAddress][key].json)\n          .map(e => parseInt(e))\n      : []\n  );\n  // Delay of image loading\n  const imageDelayCounter: any = useRef(0);\n  // imageDelayCounter.current = 0;\n  const jsonDelayCounter: any = useRef(0);\n  // jsonDelayCounter.current = 0;\n\n  // Map of the Promises of the tokens to be loaded after delay\n  const delayedImagesMap: any = useRef({});\n  const delayedJsonMap: any = useRef({});\n  // Map of the images of the tokens already loaded\n  const imagesLoadedMap: any = useRef({});\n\n  // Contract hooks\n  const totalSupply = useTotalSupply(activeContractAddress);\n  const [initialToken] = useTokenByIndex(activeContractAddress, [0]);\n  const tokenURIs = useTokenURI(\n    activeContractAddress,\n    pendingUriTokens.current\n  );\n\n  // Effect to recalculate size\n  useEffect(() => {\n    resize();\n    window.addEventListener(\"resize\", () => {\n      resize();\n    });\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  // Effect to initialize store with the contract token skeleton data\n  const initialValue = initialToken ? initialToken[0] : null;\n  useEffect(() => {\n    if (initialValue && totalSupply && !dataByContract[activeContractAddress]) {\n      dispatch(\n        init({\n          totalSupply: totalSupply.toNumber(),\n          contractAddress: activeContractAddress,\n          initialValue: initialValue.toNumber()\n        })\n      );\n    }\n  }, [\n    dispatch,\n    totalSupply,\n    dataByContract,\n    activeContractAddress,\n    initialValue\n  ]);\n\n  // Effect that activates after totalSupply is obtained, and store has been initialized\n  // Finds the next tokens that have not got any uri\n  useEffect(() => {\n    if (totalSupply && dataByContract[activeContractAddress]) {\n      let list: number[] = [];\n      Object.keys(dataByContract[activeContractAddress]).forEach(key => {\n        if (!dataByContract[activeContractAddress][key].uri) {\n          list = [...list, parseInt(key)];\n        }\n      });\n\n      list = list.filter((_, index) => index <= 500);\n      pendingUriTokens.current = list;\n    }\n  }, [activeContractAddress, dispatch, totalSupply, dataByContract]);\n\n  // Effect that dispatches the uris that are present from blockchain\n  // but not yet present in the store\n  const stringCache = JSON.stringify(tokenURIs);\n  useEffect(() => {\n    if (totalSupply && dataByContract[activeContractAddress]) {\n      let tokensToDispatch: any[] = [];\n      let tokensToDispatchIds: any[] = [];\n\n      pendingUriTokens.current.forEach((t, index) => {\n        if (tokenURIs[index] && !dataByContract[activeContractAddress][t].uri) {\n          // TODO Optimize this\n          tokensToDispatch = [\n            ...tokensToDispatch,\n            { tokenId: t, uri: tokenURIs[index][0] }\n          ];\n          tokensToDispatchIds = [...tokensToDispatchIds, t];\n        }\n      });\n\n      if (tokensToDispatch.length) {\n        dispatch(\n          setMetadataURI({\n            contractAddress: activeContractAddress,\n            tokens: tokensToDispatch\n          })\n        );\n      }\n    }\n  }, [\n    activeContractAddress,\n    stringCache,\n    pendingUriTokens,\n    totalSupply,\n    dataByContract,\n    dispatch,\n    tokenURIs\n  ]);\n\n  const refreshViewport = debounce(async () => {\n    imageDelayCounter.current = 0;\n    jsonDelayCounter.current = 0;\n\n    Object.values(delayedImagesMap.current).forEach((e: any) => {\n      if (e && e.controller) {\n        e.controller.abort();\n      }\n    });\n    delayedImagesMap.current = {};\n\n    Object.values(delayedJsonMap.current).forEach((e: any) => {\n      if (e && e.controller) {\n        e.controller.abort();\n      }\n    });\n    delayedJsonMap.current = {};\n  }, 2000);\n\n  // Effect to load when a different contract address is detected\n  const prevActiveContractAddress = usePrevious(activeContractAddress);\n  useEffect(() => {\n    if (prevActiveContractAddress !== activeContractAddress) {\n      Object.values(delayedImagesMap.current).forEach((e: any) => {\n        if (e && e.controller) {\n          e.controller.abort();\n        }\n      });\n      Object.values(delayedJsonMap.current).forEach((e: any) => {\n        if (e && e.controller) {\n          e.controller.abort();\n        }\n      });\n      delayedImagesMap.current = {};\n      delayedJsonMap.current = {};\n      imagesLoadedMap.current = {};\n      // imageDelayCounter.current = 0;\n      // jsonDelayCounter.current = 0;\n      pendingUriTokens.current = [];\n      downloadedMetadataTokens.current = [];\n    }\n  }, [activeContractAddress, prevActiveContractAddress]);\n\n  // Event that is triggered after a scroll is made on the page\n  useEffect(() => {\n    window.addEventListener(\"scroll\", refreshViewport);\n    return () => {\n      window.removeEventListener(\"scroll\", refreshViewport);\n    };\n  }, [activeContractAddress, dataByContract, refreshViewport]);\n\n  // Effect when first loaded all the images (after fetching all URIS)\n  const prevLoadedUris = usePrevious(loadedUris);\n  useEffect(() => {\n    if (prevLoadedUris === false && loadedUris === true) {\n      refreshViewport();\n      downloadedMetadataTokens.current = [];\n    }\n  }, [loadedUris, prevLoadedUris, refreshViewport]);\n\n  // Callback for obtaining the JSON Metadata\n  const fetchTokenJSON = useCallback(\n    async (tokenId: number) => {\n      if (\n        !dataByContract[activeContractAddress] ||\n        !dataByContract[activeContractAddress][tokenId]\n      ) {\n        return;\n      }\n      let uri = dataByContract[activeContractAddress][tokenId].uri;\n\n      try {\n        if (uri.startsWith(\"ipfs:\")) {\n          uri = ipfsGatewayUrl(uri, ipfsGateway);\n        } else if (corsProxyUrl) {\n          uri = corsProxyUrl + uri;\n        }\n\n        const response = await fetch(uri);\n        const data = await response.text();\n\n        dispatch(\n          setMetadataJSON({\n            contractAddress: activeContractAddress,\n            tokens: [{ tokenId, json: JSON.parse(data) }]\n          })\n        );\n        downloadedMetadataTokens.current = [\n          ...downloadedMetadataTokens.current,\n          tokenId\n        ];\n        return data;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    [dataByContract, activeContractAddress, dispatch, corsProxyUrl, ipfsGateway]\n  );\n\n  // Callback called when the image delay is finished\n  let toggle = true;\n  const addFinishedDelay = () => {\n    if (toggle) {\n      delayFinishedTokens.current = cellRendererList;\n      toggle = false;\n      forceUpdate();\n    }\n  };\n\n  // Updates the state  with the window values\n  const resize = () => {\n    if (window.innerWidth < 500) {\n      setItemSize(120);\n    } else {\n      setItemSize(200);\n    }\n    setWindowSize({\n      height: window.innerHeight,\n      width: window.innerWidth\n    });\n  };\n\n  // Function that receives the token ID and an sleep time\n  // it will generate the image after sleep is finished\n  const delayCachedImage = async (\n    tokenId: number,\n    sleepTime: number,\n    signal: any\n  ) => {\n    await sleep(sleepTime, signal);\n\n    let img: any = null;\n    img = new window.Image();\n\n    let imgUrl = dataByContract[activeContractAddress][tokenId].json.image;\n    if (imgUrl.startsWith(\"ipfs:\")) {\n      imgUrl = ipfsGatewayUrl(imgUrl, ipfsGateway);\n    }\n\n    img.src = imgUrl;\n    img.onload = () => {\n      if (!signal.aborted) {\n        imagesLoadedMap.current = {\n          ...imagesLoadedMap.current,\n          [tokenId]: img.src\n        };\n\n        let newDelayedImagesMap = { ...delayedImagesMap.current };\n        delete newDelayedImagesMap[tokenId];\n        delayedImagesMap.current = newDelayedImagesMap;\n\n        forceUpdate();\n      }\n    };\n    await sleep(20000, signal);\n\n    // If image is not loading, retry\n    if (!img.complete || !img.naturalWidth) {\n      img.src = \"\";\n\n      const controller = new AbortController();\n      const signal = controller.signal;\n\n      const promise = delayCachedImage(tokenId, 0, signal);\n\n      let newDelayedImagesMap = { ...delayedImagesMap.current };\n      newDelayedImagesMap[tokenId] = { promise, controller };\n      delayedImagesMap.current = newDelayedImagesMap;\n    }\n  };\n\n  const delayJson = async (tokenId: number, sleepTime: number, signal: any) => {\n    await sleep(sleepTime, signal);\n    fetchTokenJSON(tokenId);\n  };\n\n  // Function called for render the dinaymic table\n  let cellRendererList: number[] = [];\n  const cellRendererListRef = useRef(cellRendererList);\n  cellRendererListRef.current = cellRendererList;\n  const cellRenderer = ({ index, style, ref }: any) => {\n    const times = Math.floor(containerWidth / itemSize);\n    const start = index * times;\n    const cells = new Array(times)\n      .fill({})\n      .filter((_, index) => start + index < totalSupply.toNumber());\n    for (let i = 0; i < cells.length; i++) {\n      const tokenId = parseInt(\n        Object.keys(dataByContract[activeContractAddress])[start + i]\n      );\n\n      if (!cellRendererList.includes(tokenId)) {\n        cellRendererList.push(tokenId);\n      }\n      if (\n        dataByContract[activeContractAddress][tokenId] &&\n        (dataByContract[activeContractAddress][tokenId].json\n          ? !dataByContract[activeContractAddress][tokenId].json.image\n          : true) &&\n        !delayedJsonMap.current[tokenId]\n      ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        const promise = delayJson(tokenId, jsonDelayCounter.current, signal);\n        delayedJsonMap.current = {\n          ...delayedJsonMap.current,\n          [tokenId]: { promise, controller }\n        };\n        jsonDelayCounter.current = jsonDelayCounter.current + 250;\n      }\n\n      if (\n        dataByContract[activeContractAddress][tokenId] &&\n        dataByContract[activeContractAddress][tokenId].json &&\n        dataByContract[activeContractAddress][tokenId].json.image &&\n        delayFinishedTokens.current.includes(tokenId) &&\n        !delayedImagesMap.current[tokenId] &&\n        !imagesLoadedMap.current[tokenId]\n      ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        const promise = delayCachedImage(\n          tokenId,\n          imageDelayCounter.current,\n          signal\n        );\n        delayedImagesMap.current = {\n          ...delayedImagesMap.current,\n          [tokenId]: { promise, controller }\n        };\n        imageDelayCounter.current = imageDelayCounter.current + 500;\n      }\n    }\n\n    return (\n      <Flex direction=\"row\" justify=\"center\" style={style}>\n        {cells.map((_, index) => {\n          const tokenId = parseInt(\n            Object.keys(dataByContract[activeContractAddress])[start + index]\n          );\n\n          return (\n            <Link\n              key={`${tokenId}-${index}`}\n              onClick={() => {\n                imagesLoadedMap.current[tokenId] && setTokenModal(tokenId);\n              }}\n            >\n              <Box position=\"relative\" _hover={{ background: \"blue\" }}>\n                <Flex\n                  height={itemSize}\n                  width={itemSize}\n                  bg=\"gray.900\"\n                  opacity={imagesLoadedMap.current[tokenId] ? 0 : 1}\n                  position=\"absolute\"\n                  top=\"0\"\n                  _hover={{ opacity: \"0.9\" }}\n                  justify=\"center\"\n                  align=\"center\"\n                  direction=\"column\"\n                >\n                  <Text fontSize={40}>#{tokenId}</Text>\n                  {!imagesLoadedMap.current[tokenId] ? (\n                    <Flex>\n                      <Text ml={2} fontSize={10}>\n                        LOADING...\n                      </Text>\n                    </Flex>\n                  ) : null}\n                </Flex>\n                <DelayedImage\n                  setFinishedDelay={addFinishedDelay}\n                  boxSize=\"200px\"\n                  itemSize={itemSize}\n                  index={index}\n                  alt={`${tokenId}`}\n                  title={`${tokenId}`}\n                  loading=\"lazy\"\n                  tokenId={tokenId}\n                  src={imagesLoadedMap.current[tokenId]}\n                  metadata={\n                    (dataByContract[activeContractAddress][tokenId] &&\n                      dataByContract[activeContractAddress][tokenId].json) ??\n                    undefined\n                  }\n                  isFinishedDelay={delayFinishedTokens.current.includes(\n                    tokenId\n                  )}\n                  isLoadedImage={imagesLoadedMap.current[tokenId]}\n                />\n              </Box>\n            </Link>\n          );\n        })}\n      </Flex>\n    );\n  };\n\n  return (\n    <Fragment>\n      {totalSupply && loadedUris ? (\n        <Fragment>\n          {tokenModal !== null ? (\n            <GalleryModal\n              tokenId={tokenModal}\n              imgUrl={imagesLoadedMap.current[tokenModal]}\n              onClose={() => {\n                setTokenModal(null);\n              }}\n            />\n          ) : null}\n\n          <Flex direction=\"column\" align=\"center\">\n            <Flex wrap=\"wrap\" justify=\"center\">\n              <div\n                id=\"virtualContainer\"\n                style={{ width: containerWidth, height: \"100%\" }}\n              >\n                <ReactWindowScroller>\n                  {({ ref, outerRef, style, onScroll }: any) => (\n                    <List\n                      style={style}\n                      outerRef={outerRef}\n                      ref={ref}\n                      height={window.innerHeight}\n                      itemCount={Math.ceil(\n                        totalSupply.toNumber() /\n                          Math.floor(containerWidth / itemSize)\n                      )}\n                      itemSize={itemSize}\n                      width={window.innerWidth}\n                      onScroll={onScroll}\n                    >\n                      {cellRenderer}\n                    </List>\n                  )}\n                </ReactWindowScroller>\n              </div>\n            </Flex>\n          </Flex>\n        </Fragment>\n      ) : (\n        <Flex p={5} mt={8} align=\"center\" justify=\"center\" direction=\"column\">\n          <Box color=\"gray.700\">\n            <Spinner />\n          </Box>\n          <Box mt={2}>\n            <Text textAlign=\"center\">\n              {\" \"}\n              {!wrongNetWork\n                ? `Loading data from the blockchain, please wait ${\n                    totalSupply && missingUri !== totalSupply.toNumber()\n                      ? `[ ${missingUri} / ${\n                          totalSupply ? totalSupply.toNumber() : \"\"\n                        } ]`\n                      : \"\"\n                  }`\n                : \"Please connect to Ethereum Network\"}\n            </Text>\n          </Box>\n        </Flex>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Gallery;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\ninterface OptionState {\n  corsProxyUrl: string | null;\n  ipfsGateway: string;\n}\n\nexport const initialState: OptionState = {\n  corsProxyUrl:\n    \"https://e6bp05g0dh.execute-api.us-east-1.amazonaws.com/dev?url=\",\n  ipfsGateway: \"infura-ipfs.io\"\n};\n\nexport const optionsSlice = createSlice({\n  name: \"options\",\n  initialState,\n  reducers: {\n    setCorsProxyUrl: (state, action) => {\n      state.corsProxyUrl = action.payload;\n    },\n    setIpfsGateway: (state, action) => {\n      state.ipfsGateway = action.payload;\n    }\n  }\n});\n\nexport const { setCorsProxyUrl, setIpfsGateway } = optionsSlice.actions;\n\nexport default optionsSlice.reducer;\n","const presets: any[] = [\n  {\n    name: \"Pudgy Penguins\",\n    address: \"0xBd3531dA5CF5857e7CfAA92426877b022e612cf8\"\n  },\n  { name: \"Cool Cats\", address: \"0x1A92f7381B9F03921564a437210bB9396471050C\" },\n  {\n    name: \"Boonji Project\",\n    address: \"0x4cd0ea8b1bDb5ab9249d96cCF3d8A0d3aDa2Bc76\"\n  },\n  {\n    name: \"Lazy Lions\",\n    address: \"0x8943C7bAC1914C9A7ABa750Bf2B6B09Fd21037E0\",\n    options: { cors: true }\n  },\n  {\n    name: \"World Of Women\",\n    address: \"0xe785E82358879F061BC3dcAC6f0444462D4b5330\",\n    options: { cors: true }\n  },\n  {\n    name: \"Creature World\",\n    address: \"0xc92cedDfb8dd984A89fb494c376f9A48b999aAFc\",\n    options: { cors: true }\n  },\n  {\n    name: \"DeadFellaz\",\n    address: \"0x2acAb3DEa77832C09420663b0E1cB386031bA17B\",\n    options: { cors: true }\n  },\n  {\n    name: \"Stoner Cats\",\n    address: \"0xD4d871419714B778eBec2E22C7c53572b573706e\",\n    options: { cors: true }\n  },\n  {\n    name: \"Desperate ApeWives\",\n    address: \"0xF1268733C6FB05EF6bE9cF23d24436Dcd6E0B35E\",\n    options: { cors: true }\n  },\n  {\n    name: \"Bored Ape Yacht Club\",\n    address: \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\",\n    options: { cors: true }\n  }\n];\n\nexport default presets;\n","// The name of the gateway should be included in the switch case on\n// src/helpers/ipfsGatewayUrl.ts\n\nconst ipsGateways: any[] = [\n  {\n    name: \"cloudflare-ipfs.com\"\n  },\n  {\n    name: \"dweb.link\"\n  },\n  {\n    name: \"infura-ipfs.io\"\n  }\n];\n\nexport default ipsGateways;\n","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Flex,\n  Box,\n  Button,\n  Input,\n  Heading,\n  Select,\n  FormControl,\n  FormLabel\n} from \"@chakra-ui/react\";\n\nimport { RootState } from \"./redux/store\";\n\nimport { changeActiveContractAddress } from \"./redux/contractsSlice\";\nimport {\n  initialState as optionsInitialState,\n  setCorsProxyUrl,\n  setIpfsGateway\n} from \"./redux/optionsSlice\";\nimport presets from \"./presets\";\nimport ipfsGateways from \"./ipsGateways\";\n\nconst Header = () => {\n  const activeContractAddress = useSelector(\n    ({ contracts: { activeContractAddress } }: RootState) =>\n      activeContractAddress\n  );\n  const corsProxyUrl = useSelector(\n    ({ options: { corsProxyUrl } }: RootState) => corsProxyUrl\n  );\n  const ipfsGateway = useSelector(\n    ({ options: { ipfsGateway } }: RootState) => ipfsGateway\n  );\n  const dispatch = useDispatch();\n  const [formContractAddress, setFormContractAddress] = useState<string>(\n    activeContractAddress\n  );\n  const [formIpfsGatewayUrl, serFormIpfsGatewayUrl] = useState<string>(\n    ipfsGateway\n  );\n  const [firstFormIpfsGatewayUrl, setFirstFormIpfsGatewayUrl] = useState<\n    string\n  >(ipfsGateway);\n  const [preset, setPreset] = useState(\n    presets.find(({ address }) => address === activeContractAddress)\n      ? presets.find(({ address }) => address === activeContractAddress).address\n      : \"\"\n  );\n  const [showOptions, setShowOptions] = useState<boolean>(false);\n  const [formCorsProxyUrl, setFormCorsProxyUrl] = useState<string>(\n    corsProxyUrl == null ? \"\" : corsProxyUrl\n  );\n  const [firstFormCorsProxyUrl, setFirstFormCorsProxyUrl] = useState<\n    string | null\n  >(corsProxyUrl == null ? \"\" : corsProxyUrl);\n\n  return (\n    <Box\n      id=\"header\"\n      as=\"header\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      width=\"100%\"\n      p={0}\n      alignItems=\"center\"\n    >\n      <Flex borderRadius=\"20px\" bg=\"gray.600\" p={4} m={5} justify=\"center\">\n        <Flex direction=\"column\">\n          <Heading textAlign=\"center\" as=\"h1\">\n            NFT Explorer\n          </Heading>\n          <Box textAlign=\"center\"pt={2} pb={2}>\n            Enter any Contract Address of an NFT Collection or select any of the\n            available presets\n          </Box>\n          <Flex\n            justify=\"space-around\"\n            align=\"center\"\n            height=\"100%\"\n            direction={{ base: \"column\", md: \"row\" }}\n          >\n            <Select\n              width={{ base: \"100%\", md: \"180px\" }}\n              onChange={({ target: { value } }) => {\n                setPreset(value);\n                if (value) {\n                  setFormContractAddress(value);\n                  dispatch(changeActiveContractAddress(value));\n                }\n              }}\n              value={preset}\n            >\n              {presets.map(({ name, address }) => (\n                <option key={address} value={address}>\n                  {name}\n                </option>\n              ))}\n              <option key=\"other\" value=\"\">\n                Other\n              </option>\n            </Select>\n            <Input\n              mt={{ base: 2, md: 0 }}\n              ml=\"5px\"\n              width={{ base: \"100%\", md: \"420px\" }}\n              placeholder=\"Address\"\n              value={formContractAddress}\n              onChange={({ target: { value } }) => {\n                setFormContractAddress(value);\n              }}\n            />\n            <Flex mt={{ base: 2, md: 0 }}>\n              <Button\n                ml=\"5px\"\n                onClick={() => {\n                  dispatch(changeActiveContractAddress(formContractAddress));\n\n                  setPreset(\n                    presets.find(\n                      ({ address }) => address === formContractAddress\n                    )\n                      ? presets.find(\n                          ({ address }) => address === formContractAddress\n                        ).address\n                      : \"\"\n                  );\n                }}\n              >\n                Go\n              </Button>\n              <Button\n                ml=\"5px\"\n                onClick={() => {\n                  setShowOptions(!showOptions);\n                }}\n              >\n                Options\n              </Button>\n            </Flex>\n          </Flex>\n          {showOptions ? (\n            <Flex\n              direction=\"column\"\n              m={4}\n              p={4}\n              borderWidth=\"2px\"\n              borderRadius=\"12px\"\n            >\n              <Flex direction=\"column\">\n                <FormControl id=\"corsProxy\">\n                  <FormLabel>CORS Proxy</FormLabel>\n                  <Input\n                    ml=\"5px\"\n                    placeholder=\"\"\n                    value={formCorsProxyUrl}\n                    onChange={({ target: { value } }) => {\n                      setFormCorsProxyUrl(value);\n                    }}\n                  />\n                </FormControl>\n                <FormControl id=\"ipfsGateway\" mt={3}>\n                  <FormLabel>IPFS Gateway</FormLabel>\n                  <Select\n                    value={formIpfsGatewayUrl}\n                    onChange={({ target: { value } }) => {\n                      serFormIpfsGatewayUrl(value);\n                    }}\n                  >\n                    {ipfsGateways.map(({ name }) => (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Flex>\n              <Flex mt={3} justify=\"end\">\n                <Button\n                  onClick={() => {\n                    dispatch(setCorsProxyUrl(formCorsProxyUrl));\n                    dispatch(setIpfsGateway(formIpfsGatewayUrl));\n                    setShowOptions(false);\n                    setFirstFormIpfsGatewayUrl(formIpfsGatewayUrl);\n                    setFirstFormCorsProxyUrl(formCorsProxyUrl);\n                  }}\n                  isDisabled={\n                    firstFormCorsProxyUrl === formCorsProxyUrl &&\n                    firstFormIpfsGatewayUrl === formIpfsGatewayUrl\n                  }\n                >\n                  Update\n                </Button>\n                <Button\n                  ml={2}\n                  isDisabled={\n                    optionsInitialState.corsProxyUrl === formCorsProxyUrl &&\n                    optionsInitialState.ipfsGateway === formIpfsGatewayUrl\n                  }\n                  onClick={() => {\n                    setFormCorsProxyUrl(\n                      optionsInitialState.corsProxyUrl == null\n                        ? \"\"\n                        : optionsInitialState.corsProxyUrl\n                    );\n                    serFormIpfsGatewayUrl(optionsInitialState.ipfsGateway);\n                    dispatch(setCorsProxyUrl(optionsInitialState.corsProxyUrl));\n                    dispatch(setIpfsGateway(optionsInitialState.ipfsGateway));\n                    setShowOptions(false);\n                    setFirstFormIpfsGatewayUrl(optionsInitialState.ipfsGateway);\n                    setFirstFormCorsProxyUrl(optionsInitialState.corsProxyUrl);\n                  }}\n                >\n                  Reset\n                </Button>\n              </Flex>\n            </Flex>\n          ) : null}\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\nexport default Header;\n","import { useEffect, useState, Fragment } from \"react\";\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport { RootState } from \"./redux/store\";\nimport useTokenByIndex from \"./hooks/useTokenByIndex\";\nimport useTotalSupply from \"./hooks/useTotalSupply\";\nimport { useSelector } from \"react-redux\";\n\nconst Navigator = () => {\n  const activeContractAddress = useSelector(\n    ({ contracts: { activeContractAddress } }: RootState) =>\n      activeContractAddress\n  );\n  const dataByContract = useSelector(\n    ({ contracts: { dataByContract } }: RootState) => dataByContract\n  );\n  const totalSupply = useTotalSupply(activeContractAddress);\n  const [tokensByIndex] = useTokenByIndex(activeContractAddress, [0]);\n  const initialValue = tokensByIndex ? tokensByIndex[0] : null;\n\n  const [indicatorPosition, setIndicatorPosition] = useState({ x: 50, y: 0 });\n  const [scrollPercentage, setScrollPercentage] = useState(0);\n  useEffect(() => {\n    const fn = (e: any) => {\n      const yPos =\n        (window.scrollY / document.body.offsetHeight) * window.innerHeight;\n\n      setScrollPercentage(window.scrollY / document.body.offsetHeight);\n      setIndicatorPosition({ x: indicatorPosition.x, y: yPos });\n    };\n\n    window.addEventListener(\"scroll\", fn);\n    return () => {\n      window.removeEventListener(\"scroll\", fn);\n    };\n  }, [indicatorPosition]);\n\n  const numItems = 8;\n  let chunks: number[] = [];\n  if (\n    totalSupply &&\n    initialValue &&\n    dataByContract[activeContractAddress] &&\n    Object.values(dataByContract[activeContractAddress]).length\n  ) {\n    let increase = Math.floor(totalSupply.toNumber() / (numItems + 1));\n    let items: any = [];\n    for (let i = 1; i < numItems + 1; i++) {\n      items = [\n        ...items,\n        items.length ? items[items.length - 1] + increase : increase\n      ];\n    }\n\n    chunks = [\n      initialValue.toNumber(),\n      ...items,\n      Object.keys(dataByContract[activeContractAddress])[\n        Object.keys(dataByContract[activeContractAddress]).length - 1\n      ]\n    ];\n  }\n\n  const loadedUris =\n    dataByContract &&\n    dataByContract[activeContractAddress] &&\n    Object.values(dataByContract[activeContractAddress]).every(\n      (e: any) => e.uri\n    );\n\n  const isReady =\n    loadedUris &&\n    totalSupply &&\n    initialValue &&\n    dataByContract[activeContractAddress];\n  const offset = 1000;\n  let itemView = totalSupply ? totalSupply.toNumber() * scrollPercentage : 1;\n\n  return isReady ? (\n    <Fragment>\n      <Flex\n        position=\"fixed\"\n        right=\"0\"\n        top=\"0\"\n        width=\"70px\"\n        height=\"100vh\"\n        direction=\"column\"\n        justify=\"space-between\"\n      >\n        {chunks.map((num, index) => {\n          let growthPercentage: number | null = null;\n          if (itemView >= num && itemView < num + offset) {\n            growthPercentage = itemView === 0 ? 0 : (itemView - num) / offset;\n          } else if (itemView <= num && itemView > num - offset) {\n            growthPercentage = (num - itemView) / offset;\n          }\n          return (\n            <Box\n              key={index}\n              textAlign=\"end\"\n              mr={2}\n              fontSize={\n                growthPercentage != null ? 20 - 10 * growthPercentage : 10\n              }\n            >\n              {num}\n            </Box>\n          );\n        })}\n      </Flex>\n      <Box\n        display=\"none\"\n        position=\"fixed\"\n        fontSize={10}\n        right={indicatorPosition.x}\n        top={indicatorPosition.y}\n      >\n        -\n      </Box>\n    </Fragment>\n  ) : null;\n};\nexport default Navigator;\n","import { Box } from \"@chakra-ui/react\";\n\nimport \"./App.css\";\n\nimport Gallery from \"./Gallery\";\nimport Header from \"./Header\";\nimport Navigator from \"./Navigator\";\n\nconst App = () => {\n  return (\n    <Box pr=\"30px\">\n      <Navigator />\n      <Header />\n      <Box as=\"main\" pt=\"10px\">\n        <Gallery />\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false\n};\n\nconst theme = extendTheme({ config });\nexport default theme;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport contractsReducer from \"./contractsSlice\";\nimport optionsReducer from \"./optionsSlice\";\nimport { save, load } from \"redux-localstorage-simple\";\n\nconst store = configureStore({\n  reducer: {\n    contracts: contractsReducer,\n    options: optionsReducer\n  },\n  middleware: [\n    save({ states: [\"contracts\", \"options\"], namespace: \"localdata\" })\n  ],\n  preloadedState: load({\n    states: [\"contracts\", \"options\"],\n    namespace: \"localdata\"\n  })\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\nimport { DAppProvider } from \"@usedapp/core\";\nimport { ColorModeScript } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport { configChainId, alchemyApi } from \"./constants\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nconst config = {\n  readOnlyChainId: configChainId,\n  readOnlyUrls: {\n    [configChainId]: alchemyApi\n  }\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <DAppProvider config={config}>\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </DAppProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}