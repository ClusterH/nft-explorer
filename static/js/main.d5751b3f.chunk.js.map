{"version":3,"sources":["presets.ts","redux/contractsSlice.ts","hooks/useTotalSupply.ts","hooks/useTokenURI.ts","hooks/useTokenByIndex.ts","hooks/usePrevious.ts","hooks/useForceUpdate.ts","constants.ts","GalleryModal.tsx","helpers/sleep.ts","DelayedImage.tsx","helpers/ipfsGatewayUrl.ts","Gallery.tsx","redux/optionsSlice.ts","ipsGateways.ts","Header.tsx","Navigator.tsx","App.tsx","theme.ts","redux/store.ts","index.tsx"],"names":["presets","name","address","options","cors","initialState","dataByContract","activeContractAddress","Object","values","Math","floor","random","length","contractsSlice","createSlice","reducers","init","state","action","payload","contractAddress","contractMap","i","initialValue","totalSupply","setMetadataURI","tokens","forEach","tokenId","uri","setMetadataJSON","json","image","changeActiveContractAddress","actions","contractInterface","ethers","utils","Interface","ERC721","abi","useTotalSupply","useContractCall","method","args","useTokenURI","indexes","useContractCalls","map","index","useTokenByIndex","usePrevious","value","ref","useRef","useEffect","current","useForceUpdate","useState","setValue","process","REACT_APP_ALCHEMY_API","REACT_APP_CHAIN_ID","REACT_APP_ETHERSCAN_URL","REACT_APP_SITE_URL","alchemyApi","configChainId","parseInt","GalleryModal","imgUrl","onClose","resize","window","addEventListener","removeEventListener","width","innerWidth","height","innerHeight","setWindowSize","dimension","setDimension","isOpen","closeOnOverlayClick","motionPreset","size","margin","bg","display","justifyContent","onClick","e","element","target","classList","contains","justify","align","className","maxWidth","objectFit","src","sleep","ms","signal","Promise","resolve","reject","timeout","setTimeout","clearTimeout","DelayedImage","boxSize","alt","title","loading","setFinishedDelay","isFinishedDelay","isLoadedImage","metadata","itemSize","a","delayed","ipfsGatewayUrl","ipfsGateway","hash","slice","splitHash","split","transformedHash","cids","toV1","toString","Gallery","forceUpdate","chainId","useEthers","dispatch","useDispatch","useSelector","contracts","corsProxyUrl","containerWidth","wrongNetWork","missingUri","filter","loadedUris","every","tokenModal","setTokenModal","setItemSize","delayFinishedTokens","pendingUriTokens","downloadedMetadataTokens","keys","key","imageDelayCounter","jsonDelayCounter","delayedImagesMap","delayedJsonMap","imagesLoadedMap","initialToken","tokenURIs","toNumber","list","_","stringCache","JSON","stringify","tokensToDispatch","tokensToDispatchIds","t","refreshViewport","debounce","prevActiveContractAddress","controller","abort","prevLoadedUris","delayCachedImage","useCallback","sleepTime","imgSrc","img","Image","startsWith","onload","aborted","newDelayedImagesMap","complete","naturalWidth","AbortController","promise","fetchTokenJSON","fetch","response","text","data","parse","console","log","toggle","addFinishedDelay","cellRendererList","onItemsRendered","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","times","visibleFirstToken","visibleLastToken","includes","push","delayJson","cellRenderer","style","start","cells","Array","fill","direction","position","_hover","background","opacity","top","fontSize","ml","undefined","wrap","id","outerRef","onScroll","itemCount","ceil","p","mt","color","textAlign","toLocaleString","optionsSlice","setCorsProxyUrl","setIpfsGateway","ipsGateways","Header","formContractAddress","setFormContractAddress","formIpfsGatewayUrl","serFormIpfsGatewayUrl","firstFormIpfsGatewayUrl","setFirstFormIpfsGatewayUrl","find","preset","setPreset","showOptions","setShowOptions","formCorsProxyUrl","setFormCorsProxyUrl","firstFormCorsProxyUrl","setFirstFormCorsProxyUrl","presetsSorted","sort","b","localeCompare","as","flexDirection","alignItems","borderRadius","m","pt","pb","pl","pr","href","base","md","onChange","placeholder","borderWidth","ipfsGateways","isDisabled","optionsInitialState","Navigator","tokensByIndex","x","y","indicatorPosition","setIndicatorPosition","scrollPercentage","setScrollPercentage","fn","yPos","scrollY","document","body","offsetHeight","chunks","increase","items","numItems","isReady","offset","itemView","right","num","growthPercentage","mr","App","theme","extendTheme","config","initialColorMode","useSystemColorMode","store","configureStore","reducer","contractsReducer","optionsReducer","middleware","save","states","namespace","preloadedState","load","readOnlyChainId","readOnlyUrls","ReactDOM","render","StrictMode","DAppProvider","getElementById"],"mappings":"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","file":"static/js/main.d5751b3f.chunk.js","sourcesContent":["const presets: any[] = [\n  {\n    name: \"Pudgy Penguins\",\n    address: \"0xBd3531dA5CF5857e7CfAA92426877b022e612cf8\"\n  },\n  { name: \"Cool Cats\", address: \"0x1A92f7381B9F03921564a437210bB9396471050C\" },\n  {\n    name: \"Boonji Project\",\n    address: \"0x4cd0ea8b1bDb5ab9249d96cCF3d8A0d3aDa2Bc76\"\n  },\n  {\n    name: \"Lazy Lions\",\n    address: \"0x8943C7bAC1914C9A7ABa750Bf2B6B09Fd21037E0\",\n    options: { cors: true }\n  },\n  {\n    name: \"World Of Women\",\n    address: \"0xe785E82358879F061BC3dcAC6f0444462D4b5330\",\n    options: { cors: true }\n  },\n  {\n    name: \"Creature World\",\n    address: \"0xc92cedDfb8dd984A89fb494c376f9A48b999aAFc\",\n    options: { cors: true }\n  },\n  {\n    name: \"DeadFellaz\",\n    address: \"0x2acAb3DEa77832C09420663b0E1cB386031bA17B\",\n    options: { cors: true }\n  },\n  {\n    name: \"Stoner Cats\",\n    address: \"0xD4d871419714B778eBec2E22C7c53572b573706e\",\n    options: { cors: true }\n  },\n  {\n    name: \"Desperate ApeWives\",\n    address: \"0xF1268733C6FB05EF6bE9cF23d24436Dcd6E0B35E\",\n    options: { cors: true }\n  },\n  {\n    name: \"Bored Ape Yacht Club\",\n    address: \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\",\n    options: { cors: true }\n  }\n];\n\nexport default presets;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport presets from \"../presets\";\n\ninterface ContractState {\n  activeContractAddress: string;\n  dataByContract: any;\n}\n\nconst initialState: ContractState = {\n  dataByContract: {},\n  // Start with a random address from presets\n  activeContractAddress: Object.values(presets)[\n    Math.floor(Math.random() * Object.values(presets).length)\n  ].address\n};\n\nexport const contractsSlice = createSlice({\n  name: \"contracts\",\n  initialState,\n  reducers: {\n    init: (state, action) => {\n      if (!state.dataByContract[action.payload.contractAddress]) {\n        let contractMap: { [index: number]: any } = {};\n        for (\n          let i = action.payload.initialValue;\n          i < action.payload.totalSupply + action.payload.initialValue;\n          i++\n        ) {\n          contractMap[i] = {};\n        }\n        state.dataByContract[action.payload.contractAddress] = contractMap;\n      }\n    },\n    setMetadataURI: (state, action) => {\n      action.payload.tokens.forEach(({ tokenId, uri }: any) => {\n        state.dataByContract[action.payload.contractAddress][tokenId].uri = uri;\n      });\n    },\n    setMetadataJSON: (state, action) => {\n      action.payload.tokens.forEach(({ tokenId, json }: any) => {\n        state.dataByContract[action.payload.contractAddress][tokenId].json = {\n          image: json.image,\n          name: json.name\n        };\n      });\n    },\n    changeActiveContractAddress: (state, action) => {\n      state.activeContractAddress = action.payload;\n    }\n  }\n});\n\nexport const {\n  setMetadataURI,\n  setMetadataJSON,\n  changeActiveContractAddress,\n  init\n} = contractsSlice.actions;\n\nexport default contractsSlice.reducer;\n","import { ethers } from \"ethers\";\nimport { useContractCall } from \"@usedapp/core\";\nimport ERC721 from \"../abi/ERC721.json\";\n// import { contractAddress } from \"../constants.js\";\n\nconst contractInterface = new ethers.utils.Interface(ERC721.abi);\n\nconst useTotalSupply = (contractAddress: string) => {\n  const [totalSupply]: any =\n    useContractCall({\n      abi: contractInterface,\n      address: contractAddress,\n      method: \"totalSupply\",\n      args: []\n    }) ?? [];\n  return totalSupply;\n};\nexport default useTotalSupply;\n","import { ethers } from \"ethers\";\nimport { useContractCalls } from \"@usedapp/core\";\nimport ERC721 from \"../abi/ERC721.json\";\n// import { contractAddress } from \"../constants.js\";\n\nconst contractInterface = new ethers.utils.Interface(ERC721.abi);\n\nconst useTokenURI = (contractAddress: string, indexes: number[]) => {\n  const tokenURI: any =\n    useContractCalls(\n      indexes.map(index => ({\n        abi: contractInterface,\n        address: contractAddress,\n        method: \"tokenURI\",\n        args: [index]\n      }))\n    ) ?? null;\n  return tokenURI;\n};\nexport default useTokenURI;\n","import { ethers } from \"ethers\";\nimport { useContractCalls } from \"@usedapp/core\";\nimport ERC721 from \"../abi/ERC721.json\";\n\nconst contractInterface = new ethers.utils.Interface(ERC721.abi);\n\nconst useTokenByIndex = (contractAddress: string, indexes: number[]) => {\n  const tokenByIndex: any =\n    useContractCalls(\n      indexes.map(index => ({\n        abi: contractInterface,\n        address: contractAddress,\n        method: \"tokenByIndex\",\n        args: [index]\n      }))\n    ) ?? null;\n  return tokenByIndex;\n};\nexport default useTokenByIndex;\n","import { useEffect, useRef } from \"react\";\nconst usePrevious = (value: any) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePrevious;\n","import { useState } from \"react\";\nconst useForceUpdate = () => {\n  const [, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n};\nexport default useForceUpdate;\n","const {\n  REACT_APP_ALCHEMY_API,\n  REACT_APP_CHAIN_ID,\n  REACT_APP_ETHERSCAN_URL,\n  REACT_APP_SITE_URL\n} = process.env;\n\nexport const alchemyApi: string = `${REACT_APP_ALCHEMY_API}`;\nexport const configChainId: number = REACT_APP_CHAIN_ID\n  ? parseInt(REACT_APP_CHAIN_ID)\n  : 0;\nexport const etherScanUrl: string = `${REACT_APP_ETHERSCAN_URL}`;\nexport const siteUrl: string = `${REACT_APP_SITE_URL}`;\n","import { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  Image,\n  Flex\n} from \"@chakra-ui/react\";\n\nconst GalleryModal = ({ tokenId, imgUrl, onClose }: GalleryModalProps) => {\n  useEffect(() => {\n    resize();\n    window.addEventListener(\"resize\", () => {\n      resize();\n    });\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  const [, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [dimension, setDimension] = useState(\"width\");\n\n  const resize = () => {\n    if (window.innerWidth > window.innerHeight) {\n      setDimension(\"height\");\n    } else {\n      setDimension(\"width\");\n    }\n    setWindowSize({\n      height: window.innerHeight,\n      width: window.innerWidth\n    });\n  };\n\n  return (\n    <Modal\n      isOpen={tokenId !== null}\n      onClose={onClose}\n      closeOnOverlayClick\n      motionPreset=\"none\"\n      size={\"full\"}\n    >\n      <ModalOverlay />\n      <ModalContent margin=\"0\" bg=\"rgba(0,0,0,0.5)\">\n        <ModalBody\n          display=\"flex\"\n          justifyContent=\"center\"\n          onClick={e => {\n            const element = e.target as HTMLElement;\n            if (\n              element.classList.contains(\"chakra-modal__body\") ||\n              element.classList.contains(\"image-container\")\n            ) {\n              onClose();\n            }\n          }}\n        >\n          <Flex\n            height=\"\"\n            justify=\"center\"\n            align=\"center\"\n            className=\"image-container\"\n          >\n            <Image\n              maxWidth=\"none\"\n              height={dimension === \"height\" ? \"calc(100vh - 50px)\" : \"auto\"}\n              width={dimension === \"width\" ? \"calc(100vw - 50px)\" : \"auto\"}\n              objectFit=\"cover\"\n              src={imgUrl}\n            />\n          </Flex>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport interface GalleryModalProps {\n  tokenId: number;\n  imgUrl: string;\n  onClose: () => any;\n}\nexport default GalleryModal;\n","const sleep = (ms: number, signal?: any) =>\n  new Promise((resolve, reject) => {\n    let timeout: any;\n\n    const abortHandler = () => {\n      clearTimeout(timeout);\n      //reject();\n    };\n\n    timeout = setTimeout(resolve, ms);\n\n    signal?.addEventListener(\"abort\", abortHandler);\n    return timeout;\n  });\nexport default sleep;\n","import { useEffect } from \"react\";\nimport { Image, Flex } from \"@chakra-ui/react\";\nimport sleep from \"./helpers/sleep\";\n\ninterface DelayedImageProps {\n  boxSize: string;\n  alt: string;\n  title: string;\n  src: string;\n  index: number;\n  loading: \"eager\" | \"lazy\" | undefined;\n  tokenId: number;\n  setFinishedDelay: (newImage: number) => void;\n  isFinishedDelay: boolean;\n  isLoadedImage: boolean;\n  metadata: any;\n  itemSize: number;\n}\n\nconst DelayedImage = ({\n  boxSize,\n  alt,\n  title,\n  loading,\n  tokenId,\n  src,\n  index,\n  setFinishedDelay,\n  isFinishedDelay,\n  isLoadedImage,\n  metadata,\n  itemSize\n}: DelayedImageProps) => {\n  useEffect(() => {\n    const delayed = async () => {\n      await sleep(1500);\n      if (!isFinishedDelay) {\n        setFinishedDelay(tokenId);\n      }\n    };\n    delayed();\n  }, [isFinishedDelay, setFinishedDelay, tokenId, index]);\n\n  return isFinishedDelay && isLoadedImage && metadata && metadata.image ? (\n    <Image\n      boxSize={itemSize}\n      alt={alt}\n      title={title}\n      loading={loading}\n      src={src}\n    />\n  ) : (\n    <Flex height={itemSize} width={itemSize}></Flex>\n  );\n};\nexport default DelayedImage;\n","import cids from \"cids\";\nconst ipfsGatewayUrl = (uri: string, ipfsGateway: string): string => {\n  const hash = uri.slice(7);\n  switch (ipfsGateway) {\n    case \"cloudflare-ipfs.com\":\n      return `https://${ipfsGateway}/ipfs/${hash}`;\n    case \"dweb.link\":\n    case \"infura-ipfs.io\":\n      const splitHash = hash.split(\"/\");\n      const transformedHash = new cids(splitHash[0]).toV1().toString(\"base32\");\n      return `https://${transformedHash}.ipfs.${ipfsGateway}${\n        splitHash[1] ? `/${splitHash[1]}` : \"\"\n      }`;\n  }\n  return uri;\n};\nexport default ipfsGatewayUrl;\n","import { Fragment, useEffect, useState, useRef, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { ReactWindowScroller } from \"react-window-scroller\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport { useEthers } from \"@usedapp/core\";\nimport { Flex, Box, Text, Spinner, Link } from \"@chakra-ui/react\";\nimport debounce from \"debounce\";\n\nimport { init, setMetadataURI, setMetadataJSON } from \"./redux/contractsSlice\";\nimport { RootState } from \"./redux/store\";\n\nimport useTotalSupply from \"./hooks/useTotalSupply\";\nimport useTokenURI from \"./hooks/useTokenURI\";\nimport useTokenByIndex from \"./hooks/useTokenByIndex\";\nimport usePrevious from \"./hooks/usePrevious\";\nimport useForceUpdate from \"./hooks/useForceUpdate\";\n\nimport { configChainId } from \"./constants\";\n\nimport GalleryModal from \"./GalleryModal\";\nimport DelayedImage from \"./DelayedImage\";\n\nimport ipfsGatewayUrl from \"./helpers/ipfsGatewayUrl\";\nimport sleep from \"./helpers/sleep\";\n\nconst Gallery: React.FC<RouteComponentProps> = () => {\n  // Common hooks\n  const forceUpdate = useForceUpdate();\n\n  // useDapp hooks\n  const { chainId } = useEthers();\n\n  // Redux\n  const dispatch = useDispatch();\n  const dataByContract = useSelector(\n    ({ contracts: { dataByContract } }: RootState) => dataByContract\n  );\n  const activeContractAddress = useSelector(\n    ({ contracts: { activeContractAddress } }: RootState) =>\n      activeContractAddress\n  );\n  const corsProxyUrl = useSelector(\n    ({ options: { corsProxyUrl } }: RootState) => corsProxyUrl\n  );\n  const ipfsGateway = useSelector(\n    ({ options: { ipfsGateway } }: RootState) => ipfsGateway\n  );\n\n  // Calculated\n  const containerWidth = window.innerWidth * 0.9;\n  const wrongNetWork = chainId !== configChainId;\n  const missingUri = dataByContract[activeContractAddress]\n    ? Object.values(dataByContract[activeContractAddress]).filter(\n        ({ uri }: any) => !uri\n      ).length\n    : null;\n  // Flag that indicates all URIs of the gallery have been obtained\n  const loadedUris =\n    dataByContract &&\n    dataByContract[activeContractAddress] &&\n    Object.values(dataByContract[activeContractAddress]).every(\n      (e: any) => e.uri\n    );\n\n  // States\n  // State of the modal, stores the tokenId to show or null if hidden\n  const [tokenModal, setTokenModal] = useState<number | null>(null);\n  // Stores Window sizes, it rerenders page with each resize\n  const [, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [itemSize, setItemSize] = useState(300);\n\n  // References\n  // Array of tokens that finished delaying and ready to load\n  const delayFinishedTokens: any = useRef([]);\n  // Array of tokens that have not yet gotten a URI\n  const pendingUriTokens = useRef<number[]>([]);\n  // Array of tokens that have downloaded JSON Metadata\n  const downloadedMetadataTokens: any = useRef(\n    dataByContract[activeContractAddress]\n      ? Object.keys(dataByContract[activeContractAddress])\n          .filter(key => dataByContract[activeContractAddress][key].json)\n          .map(e => parseInt(e))\n      : []\n  );\n  // Delay of image loading\n  const imageDelayCounter: any = useRef(0);\n  // imageDelayCounter.current = 0;\n  const jsonDelayCounter: any = useRef(0);\n  // jsonDelayCounter.current = 0;\n\n  // Map of the Promises of the tokens to be loaded after delay\n  const delayedImagesMap: any = useRef({});\n  const delayedJsonMap: any = useRef({});\n  // Map of the images of the tokens already loaded\n  const imagesLoadedMap: any = useRef({});\n\n  // Contract hooks\n  const totalSupply = useTotalSupply(activeContractAddress);\n  const [initialToken] = useTokenByIndex(activeContractAddress, [0]);\n  const tokenURIs = useTokenURI(\n    activeContractAddress,\n    pendingUriTokens.current\n  );\n\n  // Effect to recalculate size\n  useEffect(() => {\n    resize();\n    window.addEventListener(\"resize\", () => {\n      resize();\n    });\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  // Effect to initialize store with the contract token skeleton data\n  const initialValue = initialToken ? initialToken[0] : null;\n  useEffect(() => {\n    if (initialValue && totalSupply && !dataByContract[activeContractAddress]) {\n      dispatch(\n        init({\n          totalSupply: totalSupply.toNumber(),\n          contractAddress: activeContractAddress,\n          initialValue: initialValue.toNumber()\n        })\n      );\n    }\n  }, [\n    dispatch,\n    totalSupply,\n    dataByContract,\n    activeContractAddress,\n    initialValue\n  ]);\n\n  // Effect that activates after totalSupply is obtained, and store has been initialized\n  // Finds the next tokens that have not got any uri\n  useEffect(() => {\n    if (totalSupply && dataByContract[activeContractAddress]) {\n      let list: number[] = [];\n      Object.keys(dataByContract[activeContractAddress]).forEach(key => {\n        if (!dataByContract[activeContractAddress][key].uri) {\n          list = [...list, parseInt(key)];\n        }\n      });\n\n      list = list.filter((_, index) => index <= 500);\n      pendingUriTokens.current = list;\n    }\n  }, [activeContractAddress, dispatch, totalSupply, dataByContract]);\n\n  // Effect that dispatches the uris that are present from blockchain\n  // but not yet present in the store\n  const stringCache = JSON.stringify(tokenURIs);\n  useEffect(() => {\n    if (totalSupply && dataByContract[activeContractAddress]) {\n      let tokensToDispatch: any[] = [];\n      let tokensToDispatchIds: any[] = [];\n\n      pendingUriTokens.current.forEach((t, index) => {\n        if (tokenURIs[index] && !dataByContract[activeContractAddress][t].uri) {\n          // TODO Optimize this\n          tokensToDispatch = [\n            ...tokensToDispatch,\n            { tokenId: t, uri: tokenURIs[index][0] }\n          ];\n          tokensToDispatchIds = [...tokensToDispatchIds, t];\n        }\n      });\n\n      if (tokensToDispatch.length) {\n        dispatch(\n          setMetadataURI({\n            contractAddress: activeContractAddress,\n            tokens: tokensToDispatch\n          })\n        );\n      }\n    }\n  }, [\n    activeContractAddress,\n    stringCache,\n    pendingUriTokens,\n    totalSupply,\n    dataByContract,\n    dispatch,\n    tokenURIs\n  ]);\n\n  const refreshViewport = debounce(async () => {\n    // imageDelayCounter.current = 0;\n    // jsonDelayCounter.current = 0;\n    // Object.values(delayedImagesMap.current).forEach((e: any) => {\n    //   if (e && e.controller) {\n    //     e.controller.abort();\n    //   }\n    // });\n    // delayedImagesMap.current = {};\n    //\n    // Object.values(delayedJsonMap.current).forEach((e: any) => {\n    //   if (e && e.controller) {\n    //     e.controller.abort();\n    //   }\n    // });\n    // delayedJsonMap.current = {};\n  }, 500);\n\n  // Effect to load when a different contract address is detected\n  const prevActiveContractAddress = usePrevious(activeContractAddress);\n  useEffect(() => {\n    if (prevActiveContractAddress !== activeContractAddress) {\n      Object.values(delayedImagesMap.current).forEach((e: any) => {\n        if (e && e.controller) {\n          e.controller.abort();\n        }\n      });\n      Object.values(delayedJsonMap.current).forEach((e: any) => {\n        if (e && e.controller) {\n          e.controller.abort();\n        }\n      });\n      delayedImagesMap.current = {};\n      delayedJsonMap.current = {};\n      imagesLoadedMap.current = {};\n      imageDelayCounter.current = 0;\n      jsonDelayCounter.current = 0;\n      pendingUriTokens.current = [];\n      downloadedMetadataTokens.current = [];\n    }\n  }, [activeContractAddress, prevActiveContractAddress]);\n\n  // Event that is triggered after a scroll is made on the page\n  useEffect(() => {\n    window.addEventListener(\"scroll\", refreshViewport);\n    return () => {\n      window.removeEventListener(\"scroll\", refreshViewport);\n    };\n  }, [activeContractAddress, dataByContract, refreshViewport]);\n\n  // Effect when first loaded all the images (after fetching all URIS)\n  const prevLoadedUris = usePrevious(loadedUris);\n  useEffect(() => {\n    if (prevLoadedUris === false && loadedUris === true) {\n      refreshViewport();\n      downloadedMetadataTokens.current = [];\n    }\n  }, [loadedUris, prevLoadedUris, refreshViewport]);\n\n  // Function that receives the token ID and an sleep time\n  // it will generate the image after sleep is finished\n  const delayCachedImage = useCallback(\n    async (\n      tokenId: number,\n      sleepTime: number,\n      signal: any,\n      imgSrc?: string\n    ) => {\n      await sleep(sleepTime, signal);\n\n      let img: any = null;\n      img = new window.Image();\n\n      let imgUrl =\n        imgSrc ?? dataByContract[activeContractAddress][tokenId].json.image;\n      if (imgUrl.startsWith(\"ipfs:\")) {\n        imgUrl = ipfsGatewayUrl(imgUrl, ipfsGateway);\n      }\n\n      img.src = imgUrl;\n      img.onload = () => {\n        if (!signal.aborted) {\n          imagesLoadedMap.current = {\n            ...imagesLoadedMap.current,\n            [tokenId]: img.src\n          };\n\n          let newDelayedImagesMap = { ...delayedImagesMap.current };\n          delete newDelayedImagesMap[tokenId];\n          delayedImagesMap.current = newDelayedImagesMap;\n\n          forceUpdate();\n        }\n      };\n      await sleep(10000, signal);\n\n      // If image is not loading, retry\n      if (!img.complete || !img.naturalWidth) {\n        img.src = \"\";\n\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        const promise = delayCachedImage(tokenId, 0, signal, imgUrl);\n\n        let newDelayedImagesMap = { ...delayedImagesMap.current };\n        newDelayedImagesMap[tokenId] = { promise, controller };\n        delayedImagesMap.current = newDelayedImagesMap;\n      }\n    },\n    [activeContractAddress, dataByContract, forceUpdate, ipfsGateway]\n  );\n\n  // Callback for obtaining the JSON Metadata\n  const fetchTokenJSON = useCallback(\n    async (tokenId: number, signal: any) => {\n      if (\n        !dataByContract[activeContractAddress] ||\n        !dataByContract[activeContractAddress][tokenId]\n      ) {\n        return;\n      }\n      let uri = dataByContract[activeContractAddress][tokenId].uri;\n\n      try {\n        if (uri.startsWith(\"ipfs:\")) {\n          uri = ipfsGatewayUrl(uri, ipfsGateway);\n        } else if (corsProxyUrl) {\n          uri = corsProxyUrl + uri;\n        }\n\n        const response = await fetch(uri, { signal });\n        const data = await response.text();\n\n        dispatch(\n          setMetadataJSON({\n            contractAddress: activeContractAddress,\n            tokens: [{ tokenId, json: JSON.parse(data) }]\n          })\n        );\n        downloadedMetadataTokens.current = [\n          ...downloadedMetadataTokens.current,\n          tokenId\n        ];\n\n        const controller = new AbortController();\n\n        const promise = delayCachedImage(\n          tokenId,\n          imageDelayCounter,\n          signal,\n          JSON.parse(data).image\n        );\n        delayedImagesMap.current = {\n          ...delayedImagesMap.current,\n          [tokenId]: { promise, controller }\n        };\n\n        imageDelayCounter.current = imageDelayCounter.current + 2000;\n        return data;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    [\n      dataByContract,\n      activeContractAddress,\n      dispatch,\n      corsProxyUrl,\n      ipfsGateway,\n      delayCachedImage\n    ]\n  );\n\n  // Callback called when the image delay is finished\n  let toggle = true;\n  const addFinishedDelay = () => {\n    if (toggle) {\n      delayFinishedTokens.current = cellRendererList;\n      toggle = false;\n      forceUpdate();\n    }\n  };\n  const onItemsRendered = ({\n    overscanStartIndex,\n    overscanStopIndex,\n    visibleStartIndex,\n    visibleStopIndex\n  }: any) => {\n\n\n    Object.values(delayedImagesMap.current).forEach((e: any) => {\n      if (e && e.controller) {\n        e.controller.abort();\n      }\n    });\n    delayedImagesMap.current = {};\n\n    Object.values(delayedJsonMap.current).forEach((e: any) => {\n      if (e && e.controller) {\n        e.controller.abort();\n      }\n    });\n\n    delayedJsonMap.current = {};\n\n    const times = Math.floor(containerWidth / itemSize);\n    // TODO Move this to state/ref Variables\n    // Add an effect, when dataByContract[activeContractAddress] contains tokens that\n    // change their json.image from emtpy to a value\n    // use this tokens to call delayCachedImage instead of the\n    // await call on fetchTokenJSON\n    const visibleFirstToken = visibleStartIndex * times;\n    let visibleLastToken = visibleStopIndex * times + times;\n    if (visibleLastToken > totalSupply.toNumber()) {\n      visibleLastToken = totalSupply.toNumber();\n    }\n    jsonDelayCounter.current = 0;\n    imageDelayCounter.current = 0;\n\n    for (let i = visibleFirstToken; i <= visibleLastToken; i++) {\n      const tokenId = parseInt(\n        Object.keys(dataByContract[activeContractAddress])[i]\n      );\n\n      if (!cellRendererList.includes(tokenId)) {\n        cellRendererList.push(tokenId);\n      }\n      if (\n        dataByContract[activeContractAddress][tokenId] &&\n        (dataByContract[activeContractAddress][tokenId].json\n          ? !dataByContract[activeContractAddress][tokenId].json.image\n          : true) &&\n        !delayedJsonMap.current[tokenId]\n      ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        const promise = delayJson(tokenId, jsonDelayCounter.current, signal);\n        delayedJsonMap.current = {\n          ...delayedJsonMap.current,\n          [tokenId]: { promise, controller }\n        };\n        jsonDelayCounter.current = jsonDelayCounter.current + 1000;\n      }\n\n      if (\n        dataByContract[activeContractAddress][tokenId] &&\n        dataByContract[activeContractAddress][tokenId].json &&\n        dataByContract[activeContractAddress][tokenId].json.image &&\n        delayFinishedTokens.current.includes(tokenId) &&\n        !delayedImagesMap.current[tokenId] &&\n        !imagesLoadedMap.current[tokenId]\n      ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        const promise = delayCachedImage(\n          tokenId,\n          imageDelayCounter.current,\n          signal\n        );\n        delayedImagesMap.current = {\n          ...delayedImagesMap.current,\n          [tokenId]: { promise, controller }\n        };\n        imageDelayCounter.current = imageDelayCounter.current + 2000;\n      }\n    }\n  };\n\n  // Updates the state  with the window values\n  const resize = () => {\n    if (window.innerWidth < 500) {\n      setItemSize(120);\n    } else {\n      setItemSize(200);\n    }\n    setWindowSize({\n      height: window.innerHeight,\n      width: window.innerWidth\n    });\n  };\n\n  const delayJson = async (tokenId: number, sleepTime: number, signal: any) => {\n    await sleep(sleepTime, signal);\n    fetchTokenJSON(tokenId, signal);\n  };\n\n  // Function called for render the dinaymic table\n  let cellRendererList: number[] = [];\n  const cellRendererListRef = useRef(cellRendererList);\n  cellRendererListRef.current = cellRendererList;\n  const cellRenderer = ({ index, style, ref }: any) => {\n    const times = Math.floor(containerWidth / itemSize);\n    const start = index * times;\n    const cells = new Array(times)\n      .fill({})\n      .filter((_, index) => start + index < totalSupply.toNumber());\n    for (let i = 0; i < cells.length; i++) {\n      const tokenId = parseInt(\n        Object.keys(dataByContract[activeContractAddress])[start + i]\n      );\n\n      if (!cellRendererList.includes(tokenId)) {\n        cellRendererList.push(tokenId);\n      }\n      // if (\n      //   dataByContract[activeContractAddress][tokenId] &&\n      //   (dataByContract[activeContractAddress][tokenId].json\n      //     ? !dataByContract[activeContractAddress][tokenId].json.image\n      //     : true) &&\n      //   !delayedJsonMap.current[tokenId]\n      // ) {\n      //   const controller = new AbortController();\n      //   const signal = controller.signal;\n      //\n      //   const promise = delayJson(tokenId, jsonDelayCounter.current, signal);\n      //   delayedJsonMap.current = {\n      //     ...delayedJsonMap.current,\n      //     [tokenId]: { promise, controller }\n      //   };\n      //   jsonDelayCounter.current = jsonDelayCounter.current + 250;\n      // }\n      //\n      // if (\n      //   dataByContract[activeContractAddress][tokenId] &&\n      //   dataByContract[activeContractAddress][tokenId].json &&\n      //   dataByContract[activeContractAddress][tokenId].json.image &&\n      //   delayFinishedTokens.current.includes(tokenId) &&\n      //   !delayedImagesMap.current[tokenId] &&\n      //   !imagesLoadedMap.current[tokenId]\n      // ) {\n      //   const controller = new AbortController();\n      //   const signal = controller.signal;\n      //\n      //   const promise = delayCachedImage(\n      //     tokenId,\n      //     imageDelayCounter.current,\n      //     signal\n      //   );\n      //   delayedImagesMap.current = {\n      //     ...delayedImagesMap.current,\n      //     [tokenId]: { promise, controller }\n      //   };\n      //   imageDelayCounter.current = imageDelayCounter.current + 500;\n      // }\n    }\n\n    return (\n      <Flex direction=\"row\" justify=\"center\" style={style}>\n        {cells.map((_, index) => {\n          const tokenId = parseInt(\n            Object.keys(dataByContract[activeContractAddress])[start + index]\n          );\n\n          return (\n            <Link\n              key={`${tokenId}-${index}`}\n              onClick={() => {\n                imagesLoadedMap.current[tokenId] && setTokenModal(tokenId);\n              }}\n            >\n              <Box position=\"relative\" _hover={{ background: \"blue\" }}>\n                <Flex\n                  height={itemSize}\n                  width={itemSize}\n                  bg=\"gray.900\"\n                  opacity={imagesLoadedMap.current[tokenId] ? 0 : 1}\n                  position=\"absolute\"\n                  top=\"0\"\n                  _hover={{ opacity: \"0.9\" }}\n                  justify=\"center\"\n                  align=\"center\"\n                  direction=\"column\"\n                >\n                  <Text fontSize={40}>#{tokenId}</Text>\n                  {!imagesLoadedMap.current[tokenId] ? (\n                    <Flex>\n                      <Text ml={2} fontSize={10}>\n                        LOADING...\n                      </Text>\n                    </Flex>\n                  ) : null}\n                </Flex>\n                <DelayedImage\n                  setFinishedDelay={addFinishedDelay}\n                  boxSize=\"200px\"\n                  itemSize={itemSize}\n                  index={index}\n                  alt={`${tokenId}`}\n                  title={`${tokenId}`}\n                  loading=\"lazy\"\n                  tokenId={tokenId}\n                  src={imagesLoadedMap.current[tokenId]}\n                  metadata={\n                    (dataByContract[activeContractAddress][tokenId] &&\n                      dataByContract[activeContractAddress][tokenId].json) ??\n                    undefined\n                  }\n                  isFinishedDelay={delayFinishedTokens.current.includes(\n                    tokenId\n                  )}\n                  isLoadedImage={imagesLoadedMap.current[tokenId]}\n                />\n              </Box>\n            </Link>\n          );\n        })}\n      </Flex>\n    );\n  };\n\n  return (\n    <Fragment>\n      {totalSupply && loadedUris ? (\n        <Fragment>\n          {tokenModal !== null ? (\n            <GalleryModal\n              tokenId={tokenModal}\n              imgUrl={imagesLoadedMap.current[tokenModal]}\n              onClose={() => {\n                setTokenModal(null);\n              }}\n            />\n          ) : null}\n\n          <Flex direction=\"column\" align=\"center\">\n            <Flex wrap=\"wrap\" justify=\"center\">\n              <div\n                id=\"virtualContainer\"\n                style={{ width: containerWidth, height: \"100%\" }}\n              >\n                <ReactWindowScroller>\n                  {({ ref, outerRef, style, onScroll }: any) => (\n                    <List\n                      style={style}\n                      outerRef={outerRef}\n                      ref={ref}\n                      height={window.innerHeight}\n                      itemCount={Math.ceil(\n                        totalSupply.toNumber() /\n                          Math.floor(containerWidth / itemSize)\n                      )}\n                      itemSize={itemSize}\n                      width={window.innerWidth}\n                      onScroll={onScroll}\n                      onItemsRendered={debounce(onItemsRendered, 2000)}\n                    >\n                      {cellRenderer}\n                    </List>\n                  )}\n                </ReactWindowScroller>\n              </div>\n            </Flex>\n          </Flex>\n        </Fragment>\n      ) : (\n        <Flex p={5} mt={8} align=\"center\" justify=\"center\" direction=\"column\">\n          <Box color=\"gray.700\">\n            <Spinner />\n          </Box>\n          <Box mt={2}>\n            <Text textAlign=\"center\">\n              {\" \"}\n              {!wrongNetWork\n                ? `Loading data from the blockchain, please wait`\n                : \"Please connect to Ethereum Network\"}\n            </Text>\n            <Text textAlign=\"center\">\n              {totalSupply && missingUri && missingUri < totalSupply.toNumber()\n                ? `[ ${missingUri.toLocaleString()} / ${\n                    totalSupply ? totalSupply.toNumber().toLocaleString() : \"\"\n                  } ]`\n                : \"\"}\n            </Text>\n          </Box>\n        </Flex>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Gallery;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\ninterface OptionState {\n  corsProxyUrl: string | null;\n  ipfsGateway: string;\n}\n\nexport const initialState: OptionState = {\n  corsProxyUrl:\n    \"https://e6bp05g0dh.execute-api.us-east-1.amazonaws.com/dev?url=\",\n  ipfsGateway: \"infura-ipfs.io\"\n};\n\nexport const optionsSlice = createSlice({\n  name: \"options\",\n  initialState,\n  reducers: {\n    setCorsProxyUrl: (state, action) => {\n      state.corsProxyUrl = action.payload;\n    },\n    setIpfsGateway: (state, action) => {\n      state.ipfsGateway = action.payload;\n    }\n  }\n});\n\nexport const { setCorsProxyUrl, setIpfsGateway } = optionsSlice.actions;\n\nexport default optionsSlice.reducer;\n","// The name of the gateway should be included in the switch case on\n// src/helpers/ipfsGatewayUrl.ts\n\nconst ipsGateways: any[] = [\n  {\n    name: \"cloudflare-ipfs.com\"\n  },\n  {\n    name: \"dweb.link\"\n  },\n  {\n    name: \"infura-ipfs.io\"\n  }\n];\n\nexport default ipsGateways;\n","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Flex,\n  Box,\n  Button,\n  Input,\n  Heading,\n  Select,\n  FormControl,\n  FormLabel,\n  Link\n} from \"@chakra-ui/react\";\n\nimport { RootState } from \"./redux/store\";\n\nimport { changeActiveContractAddress } from \"./redux/contractsSlice\";\nimport {\n  initialState as optionsInitialState,\n  setCorsProxyUrl,\n  setIpfsGateway\n} from \"./redux/optionsSlice\";\nimport presets from \"./presets\";\nimport ipfsGateways from \"./ipsGateways\";\n\nconst Header = () => {\n  const activeContractAddress = useSelector(\n    ({ contracts: { activeContractAddress } }: RootState) =>\n      activeContractAddress\n  );\n  const corsProxyUrl = useSelector(\n    ({ options: { corsProxyUrl } }: RootState) => corsProxyUrl\n  );\n  const ipfsGateway = useSelector(\n    ({ options: { ipfsGateway } }: RootState) => ipfsGateway\n  );\n  const dispatch = useDispatch();\n  const [formContractAddress, setFormContractAddress] = useState<string>(\n    activeContractAddress\n  );\n  const [formIpfsGatewayUrl, serFormIpfsGatewayUrl] = useState<string>(\n    ipfsGateway\n  );\n  const [firstFormIpfsGatewayUrl, setFirstFormIpfsGatewayUrl] = useState<\n    string\n  >(ipfsGateway);\n  const [preset, setPreset] = useState(\n    presets.find(({ address }) => address === activeContractAddress)\n      ? presets.find(({ address }) => address === activeContractAddress).address\n      : \"\"\n  );\n  const [showOptions, setShowOptions] = useState<boolean>(false);\n  const [formCorsProxyUrl, setFormCorsProxyUrl] = useState<string>(\n    corsProxyUrl == null ? \"\" : corsProxyUrl\n  );\n  const [firstFormCorsProxyUrl, setFirstFormCorsProxyUrl] = useState<\n    string | null\n  >(corsProxyUrl == null ? \"\" : corsProxyUrl);\n\n  let presetsSorted = presets;\n  presetsSorted.sort((a, b) => a.name.localeCompare(b.name));\n  return (\n    <Box\n      id=\"header\"\n      as=\"header\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      width=\"100%\"\n      p={0}\n      alignItems=\"center\"\n    >\n      <Flex\n        borderRadius=\"20px\"\n        bg=\"gray.600\"\n        p={4}\n        m={5}\n        justify=\"center\"\n        maxWidth=\"827px\"\n      >\n        <Flex direction=\"column\">\n          <Heading textAlign=\"center\" as=\"h1\">\n            NFT Explorer\n          </Heading>\n          <Box textAlign=\"center\" pt={5} pb={5} pl={5} pr={5}>\n            Use an<b> Ethereum ERC721</b> Contract Address with the\n            <b>\n              {\" \"}\n              <Link href=\"https://eips.ethereum.org/EIPS/eip-721\">\n                ERC721Enumerable\n              </Link>\n            </b>{\" \"}\n            Extension, or select one of the available Collection presets. Data\n            will be dynamically fetched as you scroll.\n          </Box>\n          <Flex\n            justify=\"space-around\"\n            align=\"center\"\n            height=\"100%\"\n            direction={{ base: \"column\", md: \"row\" }}\n          >\n            <Select\n              width={{ base: \"100%\", md: \"180px\" }}\n              onChange={({ target: { value } }) => {\n                setPreset(value);\n                if (value) {\n                  setFormContractAddress(value);\n                  dispatch(changeActiveContractAddress(value));\n                }\n              }}\n              value={preset}\n            >\n              {presetsSorted.map(({ name, address }) => (\n                <option key={address} value={address}>\n                  {name}\n                </option>\n              ))}\n              <option key=\"other\" value=\"\">\n                Other\n              </option>\n            </Select>\n            <Input\n              mt={{ base: 2, md: 0 }}\n              ml=\"5px\"\n              width={{ base: \"100%\", md: \"445px\" }}\n              placeholder=\"Address\"\n              value={formContractAddress}\n              onChange={({ target: { value } }) => {\n                setFormContractAddress(value);\n              }}\n            />\n            <Flex mt={{ base: 2, md: 0 }}>\n              <Button\n                ml=\"5px\"\n                onClick={() => {\n                  dispatch(changeActiveContractAddress(formContractAddress));\n\n                  setPreset(\n                    presets.find(\n                      ({ address }) => address === formContractAddress\n                    )\n                      ? presets.find(\n                          ({ address }) => address === formContractAddress\n                        ).address\n                      : \"\"\n                  );\n                }}\n              >\n                Go\n              </Button>\n              <Button\n                ml=\"5px\"\n                onClick={() => {\n                  setShowOptions(!showOptions);\n                }}\n              >\n                Options\n              </Button>\n            </Flex>\n          </Flex>\n          {showOptions ? (\n            <Flex\n              direction=\"column\"\n              m={4}\n              p={4}\n              borderWidth=\"2px\"\n              borderRadius=\"12px\"\n            >\n              <Flex direction=\"column\">\n                <FormControl id=\"corsProxy\">\n                  <FormLabel>CORS Proxy</FormLabel>\n                  <Input\n                    ml=\"5px\"\n                    placeholder=\"\"\n                    value={formCorsProxyUrl}\n                    onChange={({ target: { value } }) => {\n                      setFormCorsProxyUrl(value);\n                    }}\n                  />\n                </FormControl>\n                <FormControl id=\"ipfsGateway\" mt={3}>\n                  <FormLabel>IPFS Gateway</FormLabel>\n                  <Select\n                    value={formIpfsGatewayUrl}\n                    onChange={({ target: { value } }) => {\n                      serFormIpfsGatewayUrl(value);\n                    }}\n                  >\n                    {ipfsGateways.map(({ name }) => (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Flex>\n              <Flex mt={3} justify=\"end\">\n                <Button\n                  onClick={() => {\n                    dispatch(setCorsProxyUrl(formCorsProxyUrl));\n                    dispatch(setIpfsGateway(formIpfsGatewayUrl));\n                    setShowOptions(false);\n                    setFirstFormIpfsGatewayUrl(formIpfsGatewayUrl);\n                    setFirstFormCorsProxyUrl(formCorsProxyUrl);\n                  }}\n                  isDisabled={\n                    firstFormCorsProxyUrl === formCorsProxyUrl &&\n                    firstFormIpfsGatewayUrl === formIpfsGatewayUrl\n                  }\n                >\n                  Update\n                </Button>\n                <Button\n                  ml={2}\n                  isDisabled={\n                    optionsInitialState.corsProxyUrl === formCorsProxyUrl &&\n                    optionsInitialState.ipfsGateway === formIpfsGatewayUrl\n                  }\n                  onClick={() => {\n                    setFormCorsProxyUrl(\n                      optionsInitialState.corsProxyUrl == null\n                        ? \"\"\n                        : optionsInitialState.corsProxyUrl\n                    );\n                    serFormIpfsGatewayUrl(optionsInitialState.ipfsGateway);\n                    dispatch(setCorsProxyUrl(optionsInitialState.corsProxyUrl));\n                    dispatch(setIpfsGateway(optionsInitialState.ipfsGateway));\n                    setShowOptions(false);\n                    setFirstFormIpfsGatewayUrl(optionsInitialState.ipfsGateway);\n                    setFirstFormCorsProxyUrl(optionsInitialState.corsProxyUrl);\n                  }}\n                >\n                  Reset\n                </Button>\n              </Flex>\n            </Flex>\n          ) : null}\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\nexport default Header;\n","import { useEffect, useState, Fragment } from \"react\";\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport { RootState } from \"./redux/store\";\nimport useTokenByIndex from \"./hooks/useTokenByIndex\";\nimport useTotalSupply from \"./hooks/useTotalSupply\";\nimport { useSelector } from \"react-redux\";\n\nconst Navigator = () => {\n  const activeContractAddress = useSelector(\n    ({ contracts: { activeContractAddress } }: RootState) =>\n      activeContractAddress\n  );\n  const dataByContract = useSelector(\n    ({ contracts: { dataByContract } }: RootState) => dataByContract\n  );\n  const totalSupply = useTotalSupply(activeContractAddress);\n  const [tokensByIndex] = useTokenByIndex(activeContractAddress, [0]);\n  const initialValue = tokensByIndex ? tokensByIndex[0] : null;\n\n  const [indicatorPosition, setIndicatorPosition] = useState({ x: 50, y: 0 });\n  const [scrollPercentage, setScrollPercentage] = useState(0);\n  useEffect(() => {\n    const fn = (e: any) => {\n      const yPos =\n        (window.scrollY / document.body.offsetHeight) * window.innerHeight;\n\n      setScrollPercentage(window.scrollY / document.body.offsetHeight);\n      setIndicatorPosition({ x: indicatorPosition.x, y: yPos });\n    };\n\n    window.addEventListener(\"scroll\", fn);\n    return () => {\n      window.removeEventListener(\"scroll\", fn);\n    };\n  }, [indicatorPosition]);\n\n  const numItems = 8;\n  let chunks: number[] = [];\n  if (\n    totalSupply &&\n    initialValue &&\n    dataByContract[activeContractAddress] &&\n    Object.values(dataByContract[activeContractAddress]).length\n  ) {\n    let increase = Math.floor(totalSupply.toNumber() / (numItems + 1));\n    let items: any = [];\n    for (let i = 1; i < numItems + 1; i++) {\n      items = [\n        ...items,\n        items.length ? items[items.length - 1] + increase : increase\n      ];\n    }\n\n    chunks = [\n      initialValue.toNumber(),\n      ...items,\n      Object.keys(dataByContract[activeContractAddress])[\n        Object.keys(dataByContract[activeContractAddress]).length - 1\n      ]\n    ];\n  }\n\n  const loadedUris =\n    dataByContract &&\n    dataByContract[activeContractAddress] &&\n    Object.values(dataByContract[activeContractAddress]).every(\n      (e: any) => e.uri\n    );\n\n  const isReady =\n    loadedUris &&\n    totalSupply &&\n    initialValue &&\n    dataByContract[activeContractAddress];\n  const offset = 1000;\n  let itemView = totalSupply ? totalSupply.toNumber() * scrollPercentage : 1;\n\n  return isReady ? (\n    <Fragment>\n      <Flex\n        position=\"fixed\"\n        right=\"0\"\n        top=\"0\"\n        width=\"70px\"\n        height=\"100vh\"\n        direction=\"column\"\n        justify=\"space-between\"\n      >\n        {chunks.map((num, index) => {\n          let growthPercentage: number | null = null;\n          if (itemView >= num && itemView < num + offset) {\n            growthPercentage = itemView === 0 ? 0 : (itemView - num) / offset;\n          } else if (itemView <= num && itemView > num - offset) {\n            growthPercentage = (num - itemView) / offset;\n          }\n          return (\n            <Box\n              key={index}\n              textAlign=\"end\"\n              mr={2}\n              fontSize={\n                growthPercentage != null ? 20 - 10 * growthPercentage : 10\n              }\n            >\n              {num}\n            </Box>\n          );\n        })}\n      </Flex>\n      <Box\n        display=\"none\"\n        position=\"fixed\"\n        fontSize={10}\n        right={indicatorPosition.x}\n        top={indicatorPosition.y}\n      >\n        -\n      </Box>\n    </Fragment>\n  ) : null;\n};\nexport default Navigator;\n","import { Box } from \"@chakra-ui/react\";\n\nimport \"./App.css\";\n\nimport Gallery from \"./Gallery\";\nimport Header from \"./Header\";\nimport Navigator from \"./Navigator\";\n\nconst App = () => {\n  return (\n    <Box pr=\"30px\">\n      <Navigator />\n      <Header />\n      <Box as=\"main\" pt=\"10px\">\n        <Gallery />\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false\n};\n\nconst theme = extendTheme({ config });\nexport default theme;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport contractsReducer from \"./contractsSlice\";\nimport optionsReducer from \"./optionsSlice\";\nimport { save, load } from \"redux-localstorage-simple\";\n\nconst store = configureStore({\n  reducer: {\n    contracts: contractsReducer,\n    options: optionsReducer\n  },\n  middleware: [\n    save({ states: [\"contracts\", \"options\"], namespace: \"localdata\" })\n  ],\n  preloadedState: load({\n    states: [\"contracts\", \"options\"],\n    namespace: \"localdata\"\n  })\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\nimport { DAppProvider } from \"@usedapp/core\";\nimport { ColorModeScript } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport { configChainId, alchemyApi } from \"./constants\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nconst config = {\n  readOnlyChainId: configChainId,\n  readOnlyUrls: {\n    [configChainId]: alchemyApi\n  }\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <DAppProvider config={config}>\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </DAppProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}